Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    QUOTE

Grammar

Rule 0     S' -> scope
Rule 1     scope -> block
Rule 2     block -> block statement
Rule 3     block -> statement
Rule 4     statement -> IF LPAREN comparison RPAREN THEN block END
Rule 5     statement -> IF LPAREN comparison RPAREN THEN block ELSE block END
Rule 6     statement -> FOR LPAREN expression TO expression RPAREN NEXT block END
Rule 7     statement -> WHILE LPAREN comparison RPAREN NEXT block END
Rule 8     statement -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 9     statement -> VARIABLE EQUALS expression SEMICOLON
Rule 10    statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
Rule 11    statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON
Rule 12    statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
Rule 13    statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
Rule 14    statement -> VAR VARIABLE EQUALS expression SEMICOLON
Rule 15    statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
Rule 16    statement -> CONST VARIABLE EQUALS expression SEMICOLON
Rule 17    statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
Rule 18    statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON
Rule 19    statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END
Rule 20    statement -> DEF VARIABLE LPAREN RPAREN DO block END
Rule 21    statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON
Rule 22    statement -> VARIABLE LPAREN RPAREN SEMICOLON
Rule 23    dargument -> dargument SEPARATOR VARIABLE
Rule 24    dargument -> VARIABLE
Rule 25    cargument -> cargument SEPARATOR expression
Rule 26    cargument -> expression
Rule 27    statement -> DELETE VARIABLE SEMICOLON
Rule 28    statement -> expression SEMICOLON
Rule 29    comparison -> expression INFERIOR expression
Rule 30    comparison -> expression INFERIOR_OR_EQUAL expression
Rule 31    comparison -> expression SUPERIOR expression
Rule 32    comparison -> expression SUPERIOR_OR_EQUAL expression
Rule 33    comparison -> expression DOUBLE_EQUALS expression
Rule 34    comparison -> expression DIFFERENT expression
Rule 35    expression -> expression PLUS expression
Rule 36    expression -> expression MINUS expression
Rule 37    expression -> expression TIMES expression
Rule 38    expression -> expression DIVIDE expression
Rule 39    expression -> expression EXPONENT expression
Rule 40    expression -> expression REMAINDER expression
Rule 41    expression -> expression INFERIOR expression
Rule 42    expression -> expression INFERIOR_OR_EQUAL expression
Rule 43    expression -> expression SUPERIOR expression
Rule 44    expression -> expression SUPERIOR_OR_EQUAL expression
Rule 45    expression -> expression DOUBLE_EQUALS expression
Rule 46    expression -> expression DIFFERENT expression
Rule 47    expression -> MINUS expression
Rule 48    expression -> LPAREN expression RPAREN
Rule 49    expression -> LSQUARE UNPACK VARIABLE RSQUARE
Rule 50    expression -> TYPEOF LPAREN VARIABLE RPAREN
Rule 51    expression -> LENGTH LPAREN expression RPAREN
Rule 52    expression -> VARIABLE LSQUARE expression RSQUARE
Rule 53    expression -> VARIABLE LSQUARE expression COLON expression RSQUARE
Rule 54    expression -> VARIABLE LSQUARE COLON expression RSQUARE
Rule 55    expression -> VARIABLE LSQUARE expression COLON RSQUARE
Rule 56    expression -> VARIABLE LSQUARE COLON RSQUARE
Rule 57    expression -> NUMBER
Rule 58    expression -> STRING
Rule 59    expression -> LSQUARE cargument RSQUARE
Rule 60    expression -> VARIABLE

Terminals, with rules where they appear

ADDRESS              : 10 11 13 15 17
COLON                : 53 54 55 56
CONST                : 16 17 18
DEF                  : 19 20
DELETE               : 27
DIFFERENT            : 34 46
DIVIDE               : 38
DO                   : 19 20
DOUBLE_EQUALS        : 33 45
ELSE                 : 5
END                  : 4 5 6 7 19 20
EQUALS               : 9 10 11 12 13 14 15 16 17 18
EXPONENT             : 39
FOR                  : 6
IF                   : 4 5
INFERIOR             : 29 41
INFERIOR_OR_EQUAL    : 30 42
LENGTH               : 51
LPAREN               : 4 5 6 7 8 19 20 21 22 48 50 51
LSQUARE              : 12 13 18 49 52 53 54 55 56 59
MINUS                : 36 47
NEXT                 : 6 7
NUMBER               : 57
PLUS                 : 35
PRINT                : 8
QUOTE                : 
REMAINDER            : 40
RPAREN               : 4 5 6 7 8 19 20 21 22 48 50 51
RSQUARE              : 12 13 18 49 52 53 54 55 56 59
SEMICOLON            : 8 9 10 11 12 13 14 15 16 17 18 21 22 27 28
SEPARATOR            : 23 25
STRING               : 58
SUPERIOR             : 31 43
SUPERIOR_OR_EQUAL    : 32 44
THEN                 : 4 5
TIMES                : 37
TO                   : 6
TYPEOF               : 50
UNPACK               : 49
VAR                  : 14 15
VARIABLE             : 9 10 10 11 12 13 14 15 15 16 17 17 18 19 20 21 22 23 24 27 49 50 52 53 54 55 56 60
WHILE                : 7
error                : 

Nonterminals, with rules where they appear

block                : 1 2 4 5 5 6 7 19 20
cargument            : 18 21 25 59
comparison           : 4 5 7
dargument            : 19 23
expression           : 6 6 8 9 11 12 12 13 13 14 16 25 26 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 48 51 52 53 53 54 55
scope                : 0
statement            : 2 3

Parsing method: LALR

state 0

    (0) S' -> . scope
    (1) scope -> . block
    (2) block -> . block statement
    (3) block -> . statement
    (4) statement -> . IF LPAREN comparison RPAREN THEN block END
    (5) statement -> . IF LPAREN comparison RPAREN THEN block ELSE block END
    (6) statement -> . FOR LPAREN expression TO expression RPAREN NEXT block END
    (7) statement -> . WHILE LPAREN comparison RPAREN NEXT block END
    (8) statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (9) statement -> . VARIABLE EQUALS expression SEMICOLON
    (10) statement -> . VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (11) statement -> . ADDRESS VARIABLE EQUALS expression SEMICOLON
    (12) statement -> . VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (13) statement -> . ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (14) statement -> . VAR VARIABLE EQUALS expression SEMICOLON
    (15) statement -> . VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (16) statement -> . CONST VARIABLE EQUALS expression SEMICOLON
    (17) statement -> . CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (18) statement -> . CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON
    (19) statement -> . DEF VARIABLE LPAREN dargument RPAREN DO block END
    (20) statement -> . DEF VARIABLE LPAREN RPAREN DO block END
    (21) statement -> . VARIABLE LPAREN cargument RPAREN SEMICOLON
    (22) statement -> . VARIABLE LPAREN RPAREN SEMICOLON
    (27) statement -> . DELETE VARIABLE SEMICOLON
    (28) statement -> . expression SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    IF              shift and go to state 4
    FOR             shift and go to state 6
    WHILE           shift and go to state 8
    PRINT           shift and go to state 9
    VARIABLE        shift and go to state 10
    ADDRESS         shift and go to state 11
    VAR             shift and go to state 13
    CONST           shift and go to state 14
    DEF             shift and go to state 15
    DELETE          shift and go to state 16
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    scope                          shift and go to state 1
    block                          shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 7

state 1

    (0) S' -> scope .



state 2

    (1) scope -> block .
    (2) block -> block . statement
    (4) statement -> . IF LPAREN comparison RPAREN THEN block END
    (5) statement -> . IF LPAREN comparison RPAREN THEN block ELSE block END
    (6) statement -> . FOR LPAREN expression TO expression RPAREN NEXT block END
    (7) statement -> . WHILE LPAREN comparison RPAREN NEXT block END
    (8) statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (9) statement -> . VARIABLE EQUALS expression SEMICOLON
    (10) statement -> . VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (11) statement -> . ADDRESS VARIABLE EQUALS expression SEMICOLON
    (12) statement -> . VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (13) statement -> . ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (14) statement -> . VAR VARIABLE EQUALS expression SEMICOLON
    (15) statement -> . VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (16) statement -> . CONST VARIABLE EQUALS expression SEMICOLON
    (17) statement -> . CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (18) statement -> . CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON
    (19) statement -> . DEF VARIABLE LPAREN dargument RPAREN DO block END
    (20) statement -> . DEF VARIABLE LPAREN RPAREN DO block END
    (21) statement -> . VARIABLE LPAREN cargument RPAREN SEMICOLON
    (22) statement -> . VARIABLE LPAREN RPAREN SEMICOLON
    (27) statement -> . DELETE VARIABLE SEMICOLON
    (28) statement -> . expression SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    $end            reduce using rule 1 (scope -> block .)
    IF              shift and go to state 4
    FOR             shift and go to state 6
    WHILE           shift and go to state 8
    PRINT           shift and go to state 9
    VARIABLE        shift and go to state 10
    ADDRESS         shift and go to state 11
    VAR             shift and go to state 13
    CONST           shift and go to state 14
    DEF             shift and go to state 15
    DELETE          shift and go to state 16
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    statement                      shift and go to state 22
    expression                     shift and go to state 7

state 3

    (3) block -> statement .

    IF              reduce using rule 3 (block -> statement .)
    FOR             reduce using rule 3 (block -> statement .)
    WHILE           reduce using rule 3 (block -> statement .)
    PRINT           reduce using rule 3 (block -> statement .)
    VARIABLE        reduce using rule 3 (block -> statement .)
    ADDRESS         reduce using rule 3 (block -> statement .)
    VAR             reduce using rule 3 (block -> statement .)
    CONST           reduce using rule 3 (block -> statement .)
    DEF             reduce using rule 3 (block -> statement .)
    DELETE          reduce using rule 3 (block -> statement .)
    MINUS           reduce using rule 3 (block -> statement .)
    LPAREN          reduce using rule 3 (block -> statement .)
    LSQUARE         reduce using rule 3 (block -> statement .)
    TYPEOF          reduce using rule 3 (block -> statement .)
    LENGTH          reduce using rule 3 (block -> statement .)
    NUMBER          reduce using rule 3 (block -> statement .)
    STRING          reduce using rule 3 (block -> statement .)
    $end            reduce using rule 3 (block -> statement .)
    END             reduce using rule 3 (block -> statement .)
    ELSE            reduce using rule 3 (block -> statement .)


state 4

    (4) statement -> IF . LPAREN comparison RPAREN THEN block END
    (5) statement -> IF . LPAREN comparison RPAREN THEN block ELSE block END

    LPAREN          shift and go to state 23


state 5

    (48) expression -> LPAREN . expression RPAREN
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 24

state 6

    (6) statement -> FOR . LPAREN expression TO expression RPAREN NEXT block END

    LPAREN          shift and go to state 26


state 7

    (28) statement -> expression . SEMICOLON
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    SEMICOLON       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39


state 8

    (7) statement -> WHILE . LPAREN comparison RPAREN NEXT block END

    LPAREN          shift and go to state 40


state 9

    (8) statement -> PRINT . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 41


state 10

    (9) statement -> VARIABLE . EQUALS expression SEMICOLON
    (10) statement -> VARIABLE . EQUALS ADDRESS VARIABLE SEMICOLON
    (12) statement -> VARIABLE . LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (21) statement -> VARIABLE . LPAREN cargument RPAREN SEMICOLON
    (22) statement -> VARIABLE . LPAREN RPAREN SEMICOLON
    (52) expression -> VARIABLE . LSQUARE expression RSQUARE
    (53) expression -> VARIABLE . LSQUARE expression COLON expression RSQUARE
    (54) expression -> VARIABLE . LSQUARE COLON expression RSQUARE
    (55) expression -> VARIABLE . LSQUARE expression COLON RSQUARE
    (56) expression -> VARIABLE . LSQUARE COLON RSQUARE
    (60) expression -> VARIABLE .

    EQUALS          shift and go to state 42
    LSQUARE         shift and go to state 43
    LPAREN          shift and go to state 44
    SEMICOLON       reduce using rule 60 (expression -> VARIABLE .)
    PLUS            reduce using rule 60 (expression -> VARIABLE .)
    MINUS           reduce using rule 60 (expression -> VARIABLE .)
    TIMES           reduce using rule 60 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 60 (expression -> VARIABLE .)
    EXPONENT        reduce using rule 60 (expression -> VARIABLE .)
    REMAINDER       reduce using rule 60 (expression -> VARIABLE .)
    INFERIOR        reduce using rule 60 (expression -> VARIABLE .)
    INFERIOR_OR_EQUAL reduce using rule 60 (expression -> VARIABLE .)
    SUPERIOR        reduce using rule 60 (expression -> VARIABLE .)
    SUPERIOR_OR_EQUAL reduce using rule 60 (expression -> VARIABLE .)
    DOUBLE_EQUALS   reduce using rule 60 (expression -> VARIABLE .)
    DIFFERENT       reduce using rule 60 (expression -> VARIABLE .)


state 11

    (11) statement -> ADDRESS . VARIABLE EQUALS expression SEMICOLON
    (13) statement -> ADDRESS . VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON

    VARIABLE        shift and go to state 45


state 12

    (49) expression -> LSQUARE . UNPACK VARIABLE RSQUARE
    (59) expression -> LSQUARE . cargument RSQUARE
    (25) cargument -> . cargument SEPARATOR expression
    (26) cargument -> . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    UNPACK          shift and go to state 46
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    cargument                      shift and go to state 47
    expression                     shift and go to state 48

state 13

    (14) statement -> VAR . VARIABLE EQUALS expression SEMICOLON
    (15) statement -> VAR . VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON

    VARIABLE        shift and go to state 49


state 14

    (16) statement -> CONST . VARIABLE EQUALS expression SEMICOLON
    (17) statement -> CONST . VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (18) statement -> CONST . VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON

    VARIABLE        shift and go to state 50


state 15

    (19) statement -> DEF . VARIABLE LPAREN dargument RPAREN DO block END
    (20) statement -> DEF . VARIABLE LPAREN RPAREN DO block END

    VARIABLE        shift and go to state 51


state 16

    (27) statement -> DELETE . VARIABLE SEMICOLON

    VARIABLE        shift and go to state 52


state 17

    (47) expression -> MINUS . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 53

state 18

    (50) expression -> TYPEOF . LPAREN VARIABLE RPAREN

    LPAREN          shift and go to state 54


state 19

    (51) expression -> LENGTH . LPAREN expression RPAREN

    LPAREN          shift and go to state 55


state 20

    (57) expression -> NUMBER .

    SEMICOLON       reduce using rule 57 (expression -> NUMBER .)
    PLUS            reduce using rule 57 (expression -> NUMBER .)
    MINUS           reduce using rule 57 (expression -> NUMBER .)
    TIMES           reduce using rule 57 (expression -> NUMBER .)
    DIVIDE          reduce using rule 57 (expression -> NUMBER .)
    EXPONENT        reduce using rule 57 (expression -> NUMBER .)
    REMAINDER       reduce using rule 57 (expression -> NUMBER .)
    INFERIOR        reduce using rule 57 (expression -> NUMBER .)
    INFERIOR_OR_EQUAL reduce using rule 57 (expression -> NUMBER .)
    SUPERIOR        reduce using rule 57 (expression -> NUMBER .)
    SUPERIOR_OR_EQUAL reduce using rule 57 (expression -> NUMBER .)
    DOUBLE_EQUALS   reduce using rule 57 (expression -> NUMBER .)
    DIFFERENT       reduce using rule 57 (expression -> NUMBER .)
    RPAREN          reduce using rule 57 (expression -> NUMBER .)
    RSQUARE         reduce using rule 57 (expression -> NUMBER .)
    SEPARATOR       reduce using rule 57 (expression -> NUMBER .)
    TO              reduce using rule 57 (expression -> NUMBER .)
    COLON           reduce using rule 57 (expression -> NUMBER .)


state 21

    (58) expression -> STRING .

    SEMICOLON       reduce using rule 58 (expression -> STRING .)
    PLUS            reduce using rule 58 (expression -> STRING .)
    MINUS           reduce using rule 58 (expression -> STRING .)
    TIMES           reduce using rule 58 (expression -> STRING .)
    DIVIDE          reduce using rule 58 (expression -> STRING .)
    EXPONENT        reduce using rule 58 (expression -> STRING .)
    REMAINDER       reduce using rule 58 (expression -> STRING .)
    INFERIOR        reduce using rule 58 (expression -> STRING .)
    INFERIOR_OR_EQUAL reduce using rule 58 (expression -> STRING .)
    SUPERIOR        reduce using rule 58 (expression -> STRING .)
    SUPERIOR_OR_EQUAL reduce using rule 58 (expression -> STRING .)
    DOUBLE_EQUALS   reduce using rule 58 (expression -> STRING .)
    DIFFERENT       reduce using rule 58 (expression -> STRING .)
    RPAREN          reduce using rule 58 (expression -> STRING .)
    RSQUARE         reduce using rule 58 (expression -> STRING .)
    SEPARATOR       reduce using rule 58 (expression -> STRING .)
    TO              reduce using rule 58 (expression -> STRING .)
    COLON           reduce using rule 58 (expression -> STRING .)


state 22

    (2) block -> block statement .

    IF              reduce using rule 2 (block -> block statement .)
    FOR             reduce using rule 2 (block -> block statement .)
    WHILE           reduce using rule 2 (block -> block statement .)
    PRINT           reduce using rule 2 (block -> block statement .)
    VARIABLE        reduce using rule 2 (block -> block statement .)
    ADDRESS         reduce using rule 2 (block -> block statement .)
    VAR             reduce using rule 2 (block -> block statement .)
    CONST           reduce using rule 2 (block -> block statement .)
    DEF             reduce using rule 2 (block -> block statement .)
    DELETE          reduce using rule 2 (block -> block statement .)
    MINUS           reduce using rule 2 (block -> block statement .)
    LPAREN          reduce using rule 2 (block -> block statement .)
    LSQUARE         reduce using rule 2 (block -> block statement .)
    TYPEOF          reduce using rule 2 (block -> block statement .)
    LENGTH          reduce using rule 2 (block -> block statement .)
    NUMBER          reduce using rule 2 (block -> block statement .)
    STRING          reduce using rule 2 (block -> block statement .)
    $end            reduce using rule 2 (block -> block statement .)
    END             reduce using rule 2 (block -> block statement .)
    ELSE            reduce using rule 2 (block -> block statement .)


state 23

    (4) statement -> IF LPAREN . comparison RPAREN THEN block END
    (5) statement -> IF LPAREN . comparison RPAREN THEN block ELSE block END
    (29) comparison -> . expression INFERIOR expression
    (30) comparison -> . expression INFERIOR_OR_EQUAL expression
    (31) comparison -> . expression SUPERIOR expression
    (32) comparison -> . expression SUPERIOR_OR_EQUAL expression
    (33) comparison -> . expression DOUBLE_EQUALS expression
    (34) comparison -> . expression DIFFERENT expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    comparison                     shift and go to state 56
    expression                     shift and go to state 57

state 24

    (48) expression -> LPAREN expression . RPAREN
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    RPAREN          shift and go to state 58
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39


state 25

    (52) expression -> VARIABLE . LSQUARE expression RSQUARE
    (53) expression -> VARIABLE . LSQUARE expression COLON expression RSQUARE
    (54) expression -> VARIABLE . LSQUARE COLON expression RSQUARE
    (55) expression -> VARIABLE . LSQUARE expression COLON RSQUARE
    (56) expression -> VARIABLE . LSQUARE COLON RSQUARE
    (60) expression -> VARIABLE .

    LSQUARE         shift and go to state 59
    RPAREN          reduce using rule 60 (expression -> VARIABLE .)
    PLUS            reduce using rule 60 (expression -> VARIABLE .)
    MINUS           reduce using rule 60 (expression -> VARIABLE .)
    TIMES           reduce using rule 60 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 60 (expression -> VARIABLE .)
    EXPONENT        reduce using rule 60 (expression -> VARIABLE .)
    REMAINDER       reduce using rule 60 (expression -> VARIABLE .)
    INFERIOR        reduce using rule 60 (expression -> VARIABLE .)
    INFERIOR_OR_EQUAL reduce using rule 60 (expression -> VARIABLE .)
    SUPERIOR        reduce using rule 60 (expression -> VARIABLE .)
    SUPERIOR_OR_EQUAL reduce using rule 60 (expression -> VARIABLE .)
    DOUBLE_EQUALS   reduce using rule 60 (expression -> VARIABLE .)
    DIFFERENT       reduce using rule 60 (expression -> VARIABLE .)
    RSQUARE         reduce using rule 60 (expression -> VARIABLE .)
    SEPARATOR       reduce using rule 60 (expression -> VARIABLE .)
    SEMICOLON       reduce using rule 60 (expression -> VARIABLE .)
    TO              reduce using rule 60 (expression -> VARIABLE .)
    COLON           reduce using rule 60 (expression -> VARIABLE .)


state 26

    (6) statement -> FOR LPAREN . expression TO expression RPAREN NEXT block END
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 60

state 27

    (28) statement -> expression SEMICOLON .

    IF              reduce using rule 28 (statement -> expression SEMICOLON .)
    FOR             reduce using rule 28 (statement -> expression SEMICOLON .)
    WHILE           reduce using rule 28 (statement -> expression SEMICOLON .)
    PRINT           reduce using rule 28 (statement -> expression SEMICOLON .)
    VARIABLE        reduce using rule 28 (statement -> expression SEMICOLON .)
    ADDRESS         reduce using rule 28 (statement -> expression SEMICOLON .)
    VAR             reduce using rule 28 (statement -> expression SEMICOLON .)
    CONST           reduce using rule 28 (statement -> expression SEMICOLON .)
    DEF             reduce using rule 28 (statement -> expression SEMICOLON .)
    DELETE          reduce using rule 28 (statement -> expression SEMICOLON .)
    MINUS           reduce using rule 28 (statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 28 (statement -> expression SEMICOLON .)
    LSQUARE         reduce using rule 28 (statement -> expression SEMICOLON .)
    TYPEOF          reduce using rule 28 (statement -> expression SEMICOLON .)
    LENGTH          reduce using rule 28 (statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 28 (statement -> expression SEMICOLON .)
    STRING          reduce using rule 28 (statement -> expression SEMICOLON .)
    $end            reduce using rule 28 (statement -> expression SEMICOLON .)
    END             reduce using rule 28 (statement -> expression SEMICOLON .)
    ELSE            reduce using rule 28 (statement -> expression SEMICOLON .)


state 28

    (35) expression -> expression PLUS . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 61

state 29

    (36) expression -> expression MINUS . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 62

state 30

    (37) expression -> expression TIMES . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 63

state 31

    (38) expression -> expression DIVIDE . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 64

state 32

    (39) expression -> expression EXPONENT . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 65

state 33

    (40) expression -> expression REMAINDER . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 66

state 34

    (41) expression -> expression INFERIOR . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 67

state 35

    (42) expression -> expression INFERIOR_OR_EQUAL . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 68

state 36

    (43) expression -> expression SUPERIOR . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 69

state 37

    (44) expression -> expression SUPERIOR_OR_EQUAL . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 70

state 38

    (45) expression -> expression DOUBLE_EQUALS . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 71

state 39

    (46) expression -> expression DIFFERENT . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 72

state 40

    (7) statement -> WHILE LPAREN . comparison RPAREN NEXT block END
    (29) comparison -> . expression INFERIOR expression
    (30) comparison -> . expression INFERIOR_OR_EQUAL expression
    (31) comparison -> . expression SUPERIOR expression
    (32) comparison -> . expression SUPERIOR_OR_EQUAL expression
    (33) comparison -> . expression DOUBLE_EQUALS expression
    (34) comparison -> . expression DIFFERENT expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    comparison                     shift and go to state 73
    expression                     shift and go to state 57

state 41

    (8) statement -> PRINT LPAREN . expression RPAREN SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 74

state 42

    (9) statement -> VARIABLE EQUALS . expression SEMICOLON
    (10) statement -> VARIABLE EQUALS . ADDRESS VARIABLE SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    ADDRESS         shift and go to state 76
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 75

state 43

    (12) statement -> VARIABLE LSQUARE . expression RSQUARE EQUALS expression SEMICOLON
    (52) expression -> VARIABLE LSQUARE . expression RSQUARE
    (53) expression -> VARIABLE LSQUARE . expression COLON expression RSQUARE
    (54) expression -> VARIABLE LSQUARE . COLON expression RSQUARE
    (55) expression -> VARIABLE LSQUARE . expression COLON RSQUARE
    (56) expression -> VARIABLE LSQUARE . COLON RSQUARE
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    COLON           shift and go to state 78
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 77

state 44

    (21) statement -> VARIABLE LPAREN . cargument RPAREN SEMICOLON
    (22) statement -> VARIABLE LPAREN . RPAREN SEMICOLON
    (25) cargument -> . cargument SEPARATOR expression
    (26) cargument -> . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    RPAREN          shift and go to state 80
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    cargument                      shift and go to state 79
    expression                     shift and go to state 48

state 45

    (11) statement -> ADDRESS VARIABLE . EQUALS expression SEMICOLON
    (13) statement -> ADDRESS VARIABLE . LSQUARE expression RSQUARE EQUALS expression SEMICOLON

    EQUALS          shift and go to state 81
    LSQUARE         shift and go to state 82


state 46

    (49) expression -> LSQUARE UNPACK . VARIABLE RSQUARE

    VARIABLE        shift and go to state 83


state 47

    (59) expression -> LSQUARE cargument . RSQUARE
    (25) cargument -> cargument . SEPARATOR expression

    RSQUARE         shift and go to state 84
    SEPARATOR       shift and go to state 85


state 48

    (26) cargument -> expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    RSQUARE         reduce using rule 26 (cargument -> expression .)
    SEPARATOR       reduce using rule 26 (cargument -> expression .)
    RPAREN          reduce using rule 26 (cargument -> expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39


state 49

    (14) statement -> VAR VARIABLE . EQUALS expression SEMICOLON
    (15) statement -> VAR VARIABLE . EQUALS ADDRESS VARIABLE SEMICOLON

    EQUALS          shift and go to state 86


state 50

    (16) statement -> CONST VARIABLE . EQUALS expression SEMICOLON
    (17) statement -> CONST VARIABLE . EQUALS ADDRESS VARIABLE SEMICOLON
    (18) statement -> CONST VARIABLE . EQUALS LSQUARE cargument RSQUARE SEMICOLON

    EQUALS          shift and go to state 87


state 51

    (19) statement -> DEF VARIABLE . LPAREN dargument RPAREN DO block END
    (20) statement -> DEF VARIABLE . LPAREN RPAREN DO block END

    LPAREN          shift and go to state 88


state 52

    (27) statement -> DELETE VARIABLE . SEMICOLON

    SEMICOLON       shift and go to state 89


state 53

    (47) expression -> MINUS expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    SEMICOLON       reduce using rule 47 (expression -> MINUS expression .)
    PLUS            reduce using rule 47 (expression -> MINUS expression .)
    MINUS           reduce using rule 47 (expression -> MINUS expression .)
    TIMES           reduce using rule 47 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 47 (expression -> MINUS expression .)
    REMAINDER       reduce using rule 47 (expression -> MINUS expression .)
    INFERIOR        reduce using rule 47 (expression -> MINUS expression .)
    INFERIOR_OR_EQUAL reduce using rule 47 (expression -> MINUS expression .)
    SUPERIOR        reduce using rule 47 (expression -> MINUS expression .)
    SUPERIOR_OR_EQUAL reduce using rule 47 (expression -> MINUS expression .)
    DOUBLE_EQUALS   reduce using rule 47 (expression -> MINUS expression .)
    DIFFERENT       reduce using rule 47 (expression -> MINUS expression .)
    RPAREN          reduce using rule 47 (expression -> MINUS expression .)
    RSQUARE         reduce using rule 47 (expression -> MINUS expression .)
    SEPARATOR       reduce using rule 47 (expression -> MINUS expression .)
    TO              reduce using rule 47 (expression -> MINUS expression .)
    COLON           reduce using rule 47 (expression -> MINUS expression .)
    EXPONENT        shift and go to state 32

  ! EXPONENT        [ reduce using rule 47 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! TIMES           [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! REMAINDER       [ shift and go to state 33 ]
  ! INFERIOR        [ shift and go to state 34 ]
  ! INFERIOR_OR_EQUAL [ shift and go to state 35 ]
  ! SUPERIOR        [ shift and go to state 36 ]
  ! SUPERIOR_OR_EQUAL [ shift and go to state 37 ]
  ! DOUBLE_EQUALS   [ shift and go to state 38 ]
  ! DIFFERENT       [ shift and go to state 39 ]


state 54

    (50) expression -> TYPEOF LPAREN . VARIABLE RPAREN

    VARIABLE        shift and go to state 90


state 55

    (51) expression -> LENGTH LPAREN . expression RPAREN
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 91

state 56

    (4) statement -> IF LPAREN comparison . RPAREN THEN block END
    (5) statement -> IF LPAREN comparison . RPAREN THEN block ELSE block END

    RPAREN          shift and go to state 92


state 57

    (29) comparison -> expression . INFERIOR expression
    (30) comparison -> expression . INFERIOR_OR_EQUAL expression
    (31) comparison -> expression . SUPERIOR expression
    (32) comparison -> expression . SUPERIOR_OR_EQUAL expression
    (33) comparison -> expression . DOUBLE_EQUALS expression
    (34) comparison -> expression . DIFFERENT expression
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    INFERIOR        shift and go to state 93
    INFERIOR_OR_EQUAL shift and go to state 94
    SUPERIOR        shift and go to state 95
    SUPERIOR_OR_EQUAL shift and go to state 96
    DOUBLE_EQUALS   shift and go to state 97
    DIFFERENT       shift and go to state 98
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33


state 58

    (48) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    EXPONENT        reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    REMAINDER       reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    INFERIOR        reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    INFERIOR_OR_EQUAL reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    SUPERIOR        reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    SUPERIOR_OR_EQUAL reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    DOUBLE_EQUALS   reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    RSQUARE         reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    SEPARATOR       reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 48 (expression -> LPAREN expression RPAREN .)


state 59

    (52) expression -> VARIABLE LSQUARE . expression RSQUARE
    (53) expression -> VARIABLE LSQUARE . expression COLON expression RSQUARE
    (54) expression -> VARIABLE LSQUARE . COLON expression RSQUARE
    (55) expression -> VARIABLE LSQUARE . expression COLON RSQUARE
    (56) expression -> VARIABLE LSQUARE . COLON RSQUARE
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    COLON           shift and go to state 78
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 99

state 60

    (6) statement -> FOR LPAREN expression . TO expression RPAREN NEXT block END
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    TO              shift and go to state 100
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39


state 61

    (35) expression -> expression PLUS expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    SEMICOLON       reduce using rule 35 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 35 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 35 (expression -> expression PLUS expression .)
    INFERIOR        reduce using rule 35 (expression -> expression PLUS expression .)
    INFERIOR_OR_EQUAL reduce using rule 35 (expression -> expression PLUS expression .)
    SUPERIOR        reduce using rule 35 (expression -> expression PLUS expression .)
    SUPERIOR_OR_EQUAL reduce using rule 35 (expression -> expression PLUS expression .)
    DOUBLE_EQUALS   reduce using rule 35 (expression -> expression PLUS expression .)
    DIFFERENT       reduce using rule 35 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 35 (expression -> expression PLUS expression .)
    RSQUARE         reduce using rule 35 (expression -> expression PLUS expression .)
    SEPARATOR       reduce using rule 35 (expression -> expression PLUS expression .)
    TO              reduce using rule 35 (expression -> expression PLUS expression .)
    COLON           reduce using rule 35 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33

  ! TIMES           [ reduce using rule 35 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 35 (expression -> expression PLUS expression .) ]
  ! EXPONENT        [ reduce using rule 35 (expression -> expression PLUS expression .) ]
  ! REMAINDER       [ reduce using rule 35 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! INFERIOR        [ shift and go to state 34 ]
  ! INFERIOR_OR_EQUAL [ shift and go to state 35 ]
  ! SUPERIOR        [ shift and go to state 36 ]
  ! SUPERIOR_OR_EQUAL [ shift and go to state 37 ]
  ! DOUBLE_EQUALS   [ shift and go to state 38 ]
  ! DIFFERENT       [ shift and go to state 39 ]


state 62

    (36) expression -> expression MINUS expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    SEMICOLON       reduce using rule 36 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 36 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 36 (expression -> expression MINUS expression .)
    INFERIOR        reduce using rule 36 (expression -> expression MINUS expression .)
    INFERIOR_OR_EQUAL reduce using rule 36 (expression -> expression MINUS expression .)
    SUPERIOR        reduce using rule 36 (expression -> expression MINUS expression .)
    SUPERIOR_OR_EQUAL reduce using rule 36 (expression -> expression MINUS expression .)
    DOUBLE_EQUALS   reduce using rule 36 (expression -> expression MINUS expression .)
    DIFFERENT       reduce using rule 36 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 36 (expression -> expression MINUS expression .)
    RSQUARE         reduce using rule 36 (expression -> expression MINUS expression .)
    SEPARATOR       reduce using rule 36 (expression -> expression MINUS expression .)
    TO              reduce using rule 36 (expression -> expression MINUS expression .)
    COLON           reduce using rule 36 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33

  ! TIMES           [ reduce using rule 36 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 36 (expression -> expression MINUS expression .) ]
  ! EXPONENT        [ reduce using rule 36 (expression -> expression MINUS expression .) ]
  ! REMAINDER       [ reduce using rule 36 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! INFERIOR        [ shift and go to state 34 ]
  ! INFERIOR_OR_EQUAL [ shift and go to state 35 ]
  ! SUPERIOR        [ shift and go to state 36 ]
  ! SUPERIOR_OR_EQUAL [ shift and go to state 37 ]
  ! DOUBLE_EQUALS   [ shift and go to state 38 ]
  ! DIFFERENT       [ shift and go to state 39 ]


state 63

    (37) expression -> expression TIMES expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    SEMICOLON       reduce using rule 37 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 37 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 37 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 37 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 37 (expression -> expression TIMES expression .)
    REMAINDER       reduce using rule 37 (expression -> expression TIMES expression .)
    INFERIOR        reduce using rule 37 (expression -> expression TIMES expression .)
    INFERIOR_OR_EQUAL reduce using rule 37 (expression -> expression TIMES expression .)
    SUPERIOR        reduce using rule 37 (expression -> expression TIMES expression .)
    SUPERIOR_OR_EQUAL reduce using rule 37 (expression -> expression TIMES expression .)
    DOUBLE_EQUALS   reduce using rule 37 (expression -> expression TIMES expression .)
    DIFFERENT       reduce using rule 37 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 37 (expression -> expression TIMES expression .)
    RSQUARE         reduce using rule 37 (expression -> expression TIMES expression .)
    SEPARATOR       reduce using rule 37 (expression -> expression TIMES expression .)
    TO              reduce using rule 37 (expression -> expression TIMES expression .)
    COLON           reduce using rule 37 (expression -> expression TIMES expression .)
    EXPONENT        shift and go to state 32

  ! EXPONENT        [ reduce using rule 37 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! TIMES           [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! REMAINDER       [ shift and go to state 33 ]
  ! INFERIOR        [ shift and go to state 34 ]
  ! INFERIOR_OR_EQUAL [ shift and go to state 35 ]
  ! SUPERIOR        [ shift and go to state 36 ]
  ! SUPERIOR_OR_EQUAL [ shift and go to state 37 ]
  ! DOUBLE_EQUALS   [ shift and go to state 38 ]
  ! DIFFERENT       [ shift and go to state 39 ]


state 64

    (38) expression -> expression DIVIDE expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    SEMICOLON       reduce using rule 38 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 38 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 38 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 38 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 38 (expression -> expression DIVIDE expression .)
    REMAINDER       reduce using rule 38 (expression -> expression DIVIDE expression .)
    INFERIOR        reduce using rule 38 (expression -> expression DIVIDE expression .)
    INFERIOR_OR_EQUAL reduce using rule 38 (expression -> expression DIVIDE expression .)
    SUPERIOR        reduce using rule 38 (expression -> expression DIVIDE expression .)
    SUPERIOR_OR_EQUAL reduce using rule 38 (expression -> expression DIVIDE expression .)
    DOUBLE_EQUALS   reduce using rule 38 (expression -> expression DIVIDE expression .)
    DIFFERENT       reduce using rule 38 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 38 (expression -> expression DIVIDE expression .)
    RSQUARE         reduce using rule 38 (expression -> expression DIVIDE expression .)
    SEPARATOR       reduce using rule 38 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 38 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 38 (expression -> expression DIVIDE expression .)
    EXPONENT        shift and go to state 32

  ! EXPONENT        [ reduce using rule 38 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! TIMES           [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! REMAINDER       [ shift and go to state 33 ]
  ! INFERIOR        [ shift and go to state 34 ]
  ! INFERIOR_OR_EQUAL [ shift and go to state 35 ]
  ! SUPERIOR        [ shift and go to state 36 ]
  ! SUPERIOR_OR_EQUAL [ shift and go to state 37 ]
  ! DOUBLE_EQUALS   [ shift and go to state 38 ]
  ! DIFFERENT       [ shift and go to state 39 ]


state 65

    (39) expression -> expression EXPONENT expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    SEMICOLON       reduce using rule 39 (expression -> expression EXPONENT expression .)
    PLUS            reduce using rule 39 (expression -> expression EXPONENT expression .)
    MINUS           reduce using rule 39 (expression -> expression EXPONENT expression .)
    TIMES           reduce using rule 39 (expression -> expression EXPONENT expression .)
    DIVIDE          reduce using rule 39 (expression -> expression EXPONENT expression .)
    EXPONENT        reduce using rule 39 (expression -> expression EXPONENT expression .)
    REMAINDER       reduce using rule 39 (expression -> expression EXPONENT expression .)
    INFERIOR        reduce using rule 39 (expression -> expression EXPONENT expression .)
    INFERIOR_OR_EQUAL reduce using rule 39 (expression -> expression EXPONENT expression .)
    SUPERIOR        reduce using rule 39 (expression -> expression EXPONENT expression .)
    SUPERIOR_OR_EQUAL reduce using rule 39 (expression -> expression EXPONENT expression .)
    DOUBLE_EQUALS   reduce using rule 39 (expression -> expression EXPONENT expression .)
    DIFFERENT       reduce using rule 39 (expression -> expression EXPONENT expression .)
    RPAREN          reduce using rule 39 (expression -> expression EXPONENT expression .)
    RSQUARE         reduce using rule 39 (expression -> expression EXPONENT expression .)
    SEPARATOR       reduce using rule 39 (expression -> expression EXPONENT expression .)
    TO              reduce using rule 39 (expression -> expression EXPONENT expression .)
    COLON           reduce using rule 39 (expression -> expression EXPONENT expression .)

  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! TIMES           [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! EXPONENT        [ shift and go to state 32 ]
  ! REMAINDER       [ shift and go to state 33 ]
  ! INFERIOR        [ shift and go to state 34 ]
  ! INFERIOR_OR_EQUAL [ shift and go to state 35 ]
  ! SUPERIOR        [ shift and go to state 36 ]
  ! SUPERIOR_OR_EQUAL [ shift and go to state 37 ]
  ! DOUBLE_EQUALS   [ shift and go to state 38 ]
  ! DIFFERENT       [ shift and go to state 39 ]


state 66

    (40) expression -> expression REMAINDER expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    SEMICOLON       reduce using rule 40 (expression -> expression REMAINDER expression .)
    PLUS            reduce using rule 40 (expression -> expression REMAINDER expression .)
    MINUS           reduce using rule 40 (expression -> expression REMAINDER expression .)
    TIMES           reduce using rule 40 (expression -> expression REMAINDER expression .)
    DIVIDE          reduce using rule 40 (expression -> expression REMAINDER expression .)
    REMAINDER       reduce using rule 40 (expression -> expression REMAINDER expression .)
    INFERIOR        reduce using rule 40 (expression -> expression REMAINDER expression .)
    INFERIOR_OR_EQUAL reduce using rule 40 (expression -> expression REMAINDER expression .)
    SUPERIOR        reduce using rule 40 (expression -> expression REMAINDER expression .)
    SUPERIOR_OR_EQUAL reduce using rule 40 (expression -> expression REMAINDER expression .)
    DOUBLE_EQUALS   reduce using rule 40 (expression -> expression REMAINDER expression .)
    DIFFERENT       reduce using rule 40 (expression -> expression REMAINDER expression .)
    RPAREN          reduce using rule 40 (expression -> expression REMAINDER expression .)
    RSQUARE         reduce using rule 40 (expression -> expression REMAINDER expression .)
    SEPARATOR       reduce using rule 40 (expression -> expression REMAINDER expression .)
    TO              reduce using rule 40 (expression -> expression REMAINDER expression .)
    COLON           reduce using rule 40 (expression -> expression REMAINDER expression .)
    EXPONENT        shift and go to state 32

  ! EXPONENT        [ reduce using rule 40 (expression -> expression REMAINDER expression .) ]
  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! TIMES           [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! REMAINDER       [ shift and go to state 33 ]
  ! INFERIOR        [ shift and go to state 34 ]
  ! INFERIOR_OR_EQUAL [ shift and go to state 35 ]
  ! SUPERIOR        [ shift and go to state 36 ]
  ! SUPERIOR_OR_EQUAL [ shift and go to state 37 ]
  ! DOUBLE_EQUALS   [ shift and go to state 38 ]
  ! DIFFERENT       [ shift and go to state 39 ]


state 67

    (41) expression -> expression INFERIOR expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for REMAINDER resolved as shift
  ! shift/reduce conflict for INFERIOR resolved as shift
  ! shift/reduce conflict for INFERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SUPERIOR resolved as shift
  ! shift/reduce conflict for SUPERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
    SEMICOLON       reduce using rule 41 (expression -> expression INFERIOR expression .)
    RPAREN          reduce using rule 41 (expression -> expression INFERIOR expression .)
    RSQUARE         reduce using rule 41 (expression -> expression INFERIOR expression .)
    SEPARATOR       reduce using rule 41 (expression -> expression INFERIOR expression .)
    TO              reduce using rule 41 (expression -> expression INFERIOR expression .)
    COLON           reduce using rule 41 (expression -> expression INFERIOR expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39

  ! PLUS            [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! TIMES           [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! EXPONENT        [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! REMAINDER       [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! INFERIOR        [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! INFERIOR_OR_EQUAL [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! SUPERIOR        [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! SUPERIOR_OR_EQUAL [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! DIFFERENT       [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]


state 68

    (42) expression -> expression INFERIOR_OR_EQUAL expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for REMAINDER resolved as shift
  ! shift/reduce conflict for INFERIOR resolved as shift
  ! shift/reduce conflict for INFERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SUPERIOR resolved as shift
  ! shift/reduce conflict for SUPERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
    SEMICOLON       reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .)
    RPAREN          reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .)
    RSQUARE         reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .)
    SEPARATOR       reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .)
    TO              reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .)
    COLON           reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39

  ! PLUS            [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! EXPONENT        [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! REMAINDER       [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! INFERIOR        [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! INFERIOR_OR_EQUAL [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! SUPERIOR        [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! SUPERIOR_OR_EQUAL [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! DIFFERENT       [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]


state 69

    (43) expression -> expression SUPERIOR expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for REMAINDER resolved as shift
  ! shift/reduce conflict for INFERIOR resolved as shift
  ! shift/reduce conflict for INFERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SUPERIOR resolved as shift
  ! shift/reduce conflict for SUPERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
    SEMICOLON       reduce using rule 43 (expression -> expression SUPERIOR expression .)
    RPAREN          reduce using rule 43 (expression -> expression SUPERIOR expression .)
    RSQUARE         reduce using rule 43 (expression -> expression SUPERIOR expression .)
    SEPARATOR       reduce using rule 43 (expression -> expression SUPERIOR expression .)
    TO              reduce using rule 43 (expression -> expression SUPERIOR expression .)
    COLON           reduce using rule 43 (expression -> expression SUPERIOR expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39

  ! PLUS            [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! TIMES           [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! EXPONENT        [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! REMAINDER       [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! INFERIOR        [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! INFERIOR_OR_EQUAL [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! SUPERIOR        [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! SUPERIOR_OR_EQUAL [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! DIFFERENT       [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]


state 70

    (44) expression -> expression SUPERIOR_OR_EQUAL expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for REMAINDER resolved as shift
  ! shift/reduce conflict for INFERIOR resolved as shift
  ! shift/reduce conflict for INFERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SUPERIOR resolved as shift
  ! shift/reduce conflict for SUPERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
    SEMICOLON       reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .)
    RPAREN          reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .)
    RSQUARE         reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .)
    SEPARATOR       reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .)
    TO              reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .)
    COLON           reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39

  ! PLUS            [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! EXPONENT        [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! REMAINDER       [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! INFERIOR        [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! INFERIOR_OR_EQUAL [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! SUPERIOR        [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! SUPERIOR_OR_EQUAL [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! DIFFERENT       [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]


state 71

    (45) expression -> expression DOUBLE_EQUALS expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for REMAINDER resolved as shift
  ! shift/reduce conflict for INFERIOR resolved as shift
  ! shift/reduce conflict for INFERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SUPERIOR resolved as shift
  ! shift/reduce conflict for SUPERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
    SEMICOLON       reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .)
    RPAREN          reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .)
    RSQUARE         reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .)
    SEPARATOR       reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .)
    TO              reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .)
    COLON           reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39

  ! PLUS            [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! TIMES           [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! EXPONENT        [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! REMAINDER       [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! INFERIOR        [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! INFERIOR_OR_EQUAL [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! SUPERIOR        [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! SUPERIOR_OR_EQUAL [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! DIFFERENT       [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]


state 72

    (46) expression -> expression DIFFERENT expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for REMAINDER resolved as shift
  ! shift/reduce conflict for INFERIOR resolved as shift
  ! shift/reduce conflict for INFERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SUPERIOR resolved as shift
  ! shift/reduce conflict for SUPERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
    SEMICOLON       reduce using rule 46 (expression -> expression DIFFERENT expression .)
    RPAREN          reduce using rule 46 (expression -> expression DIFFERENT expression .)
    RSQUARE         reduce using rule 46 (expression -> expression DIFFERENT expression .)
    SEPARATOR       reduce using rule 46 (expression -> expression DIFFERENT expression .)
    TO              reduce using rule 46 (expression -> expression DIFFERENT expression .)
    COLON           reduce using rule 46 (expression -> expression DIFFERENT expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39

  ! PLUS            [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! MINUS           [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! TIMES           [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! EXPONENT        [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! REMAINDER       [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! INFERIOR        [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! INFERIOR_OR_EQUAL [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! SUPERIOR        [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! SUPERIOR_OR_EQUAL [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! DIFFERENT       [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]


state 73

    (7) statement -> WHILE LPAREN comparison . RPAREN NEXT block END

    RPAREN          shift and go to state 101


state 74

    (8) statement -> PRINT LPAREN expression . RPAREN SEMICOLON
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    RPAREN          shift and go to state 102
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39


state 75

    (9) statement -> VARIABLE EQUALS expression . SEMICOLON
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    SEMICOLON       shift and go to state 103
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39


state 76

    (10) statement -> VARIABLE EQUALS ADDRESS . VARIABLE SEMICOLON

    VARIABLE        shift and go to state 104


state 77

    (12) statement -> VARIABLE LSQUARE expression . RSQUARE EQUALS expression SEMICOLON
    (52) expression -> VARIABLE LSQUARE expression . RSQUARE
    (53) expression -> VARIABLE LSQUARE expression . COLON expression RSQUARE
    (55) expression -> VARIABLE LSQUARE expression . COLON RSQUARE
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    RSQUARE         shift and go to state 105
    COLON           shift and go to state 106
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39


state 78

    (54) expression -> VARIABLE LSQUARE COLON . expression RSQUARE
    (56) expression -> VARIABLE LSQUARE COLON . RSQUARE
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    RSQUARE         shift and go to state 108
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 107

state 79

    (21) statement -> VARIABLE LPAREN cargument . RPAREN SEMICOLON
    (25) cargument -> cargument . SEPARATOR expression

    RPAREN          shift and go to state 109
    SEPARATOR       shift and go to state 85


state 80

    (22) statement -> VARIABLE LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 110


state 81

    (11) statement -> ADDRESS VARIABLE EQUALS . expression SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 111

state 82

    (13) statement -> ADDRESS VARIABLE LSQUARE . expression RSQUARE EQUALS expression SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 112

state 83

    (49) expression -> LSQUARE UNPACK VARIABLE . RSQUARE

    RSQUARE         shift and go to state 113


state 84

    (59) expression -> LSQUARE cargument RSQUARE .

    SEMICOLON       reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    PLUS            reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    MINUS           reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    TIMES           reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    DIVIDE          reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    EXPONENT        reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    REMAINDER       reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    INFERIOR        reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    INFERIOR_OR_EQUAL reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    SUPERIOR        reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    SUPERIOR_OR_EQUAL reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    DOUBLE_EQUALS   reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    DIFFERENT       reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    RPAREN          reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    RSQUARE         reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    SEPARATOR       reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    TO              reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    COLON           reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)


state 85

    (25) cargument -> cargument SEPARATOR . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 114

state 86

    (14) statement -> VAR VARIABLE EQUALS . expression SEMICOLON
    (15) statement -> VAR VARIABLE EQUALS . ADDRESS VARIABLE SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    ADDRESS         shift and go to state 116
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 115

state 87

    (16) statement -> CONST VARIABLE EQUALS . expression SEMICOLON
    (17) statement -> CONST VARIABLE EQUALS . ADDRESS VARIABLE SEMICOLON
    (18) statement -> CONST VARIABLE EQUALS . LSQUARE cargument RSQUARE SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    ADDRESS         shift and go to state 118
    LSQUARE         shift and go to state 119
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 117

state 88

    (19) statement -> DEF VARIABLE LPAREN . dargument RPAREN DO block END
    (20) statement -> DEF VARIABLE LPAREN . RPAREN DO block END
    (23) dargument -> . dargument SEPARATOR VARIABLE
    (24) dargument -> . VARIABLE

    RPAREN          shift and go to state 122
    VARIABLE        shift and go to state 120

    dargument                      shift and go to state 121

state 89

    (27) statement -> DELETE VARIABLE SEMICOLON .

    IF              reduce using rule 27 (statement -> DELETE VARIABLE SEMICOLON .)
    FOR             reduce using rule 27 (statement -> DELETE VARIABLE SEMICOLON .)
    WHILE           reduce using rule 27 (statement -> DELETE VARIABLE SEMICOLON .)
    PRINT           reduce using rule 27 (statement -> DELETE VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 27 (statement -> DELETE VARIABLE SEMICOLON .)
    ADDRESS         reduce using rule 27 (statement -> DELETE VARIABLE SEMICOLON .)
    VAR             reduce using rule 27 (statement -> DELETE VARIABLE SEMICOLON .)
    CONST           reduce using rule 27 (statement -> DELETE VARIABLE SEMICOLON .)
    DEF             reduce using rule 27 (statement -> DELETE VARIABLE SEMICOLON .)
    DELETE          reduce using rule 27 (statement -> DELETE VARIABLE SEMICOLON .)
    MINUS           reduce using rule 27 (statement -> DELETE VARIABLE SEMICOLON .)
    LPAREN          reduce using rule 27 (statement -> DELETE VARIABLE SEMICOLON .)
    LSQUARE         reduce using rule 27 (statement -> DELETE VARIABLE SEMICOLON .)
    TYPEOF          reduce using rule 27 (statement -> DELETE VARIABLE SEMICOLON .)
    LENGTH          reduce using rule 27 (statement -> DELETE VARIABLE SEMICOLON .)
    NUMBER          reduce using rule 27 (statement -> DELETE VARIABLE SEMICOLON .)
    STRING          reduce using rule 27 (statement -> DELETE VARIABLE SEMICOLON .)
    $end            reduce using rule 27 (statement -> DELETE VARIABLE SEMICOLON .)
    END             reduce using rule 27 (statement -> DELETE VARIABLE SEMICOLON .)
    ELSE            reduce using rule 27 (statement -> DELETE VARIABLE SEMICOLON .)


state 90

    (50) expression -> TYPEOF LPAREN VARIABLE . RPAREN

    RPAREN          shift and go to state 123


state 91

    (51) expression -> LENGTH LPAREN expression . RPAREN
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    RPAREN          shift and go to state 124
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39


state 92

    (4) statement -> IF LPAREN comparison RPAREN . THEN block END
    (5) statement -> IF LPAREN comparison RPAREN . THEN block ELSE block END

    THEN            shift and go to state 125


state 93

    (29) comparison -> expression INFERIOR . expression
    (41) expression -> expression INFERIOR . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 126

state 94

    (30) comparison -> expression INFERIOR_OR_EQUAL . expression
    (42) expression -> expression INFERIOR_OR_EQUAL . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 127

state 95

    (31) comparison -> expression SUPERIOR . expression
    (43) expression -> expression SUPERIOR . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 128

state 96

    (32) comparison -> expression SUPERIOR_OR_EQUAL . expression
    (44) expression -> expression SUPERIOR_OR_EQUAL . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 129

state 97

    (33) comparison -> expression DOUBLE_EQUALS . expression
    (45) expression -> expression DOUBLE_EQUALS . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 130

state 98

    (34) comparison -> expression DIFFERENT . expression
    (46) expression -> expression DIFFERENT . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 131

state 99

    (52) expression -> VARIABLE LSQUARE expression . RSQUARE
    (53) expression -> VARIABLE LSQUARE expression . COLON expression RSQUARE
    (55) expression -> VARIABLE LSQUARE expression . COLON RSQUARE
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    RSQUARE         shift and go to state 132
    COLON           shift and go to state 106
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39


state 100

    (6) statement -> FOR LPAREN expression TO . expression RPAREN NEXT block END
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 133

state 101

    (7) statement -> WHILE LPAREN comparison RPAREN . NEXT block END

    NEXT            shift and go to state 134


state 102

    (8) statement -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 135


state 103

    (9) statement -> VARIABLE EQUALS expression SEMICOLON .

    IF              reduce using rule 9 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    FOR             reduce using rule 9 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    PRINT           reduce using rule 9 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    VARIABLE        reduce using rule 9 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    ADDRESS         reduce using rule 9 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    VAR             reduce using rule 9 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    CONST           reduce using rule 9 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    DEF             reduce using rule 9 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    DELETE          reduce using rule 9 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    MINUS           reduce using rule 9 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    LPAREN          reduce using rule 9 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    LSQUARE         reduce using rule 9 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    TYPEOF          reduce using rule 9 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    LENGTH          reduce using rule 9 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    NUMBER          reduce using rule 9 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    STRING          reduce using rule 9 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    $end            reduce using rule 9 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    END             reduce using rule 9 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    ELSE            reduce using rule 9 (statement -> VARIABLE EQUALS expression SEMICOLON .)


state 104

    (10) statement -> VARIABLE EQUALS ADDRESS VARIABLE . SEMICOLON

    SEMICOLON       shift and go to state 136


state 105

    (12) statement -> VARIABLE LSQUARE expression RSQUARE . EQUALS expression SEMICOLON
    (52) expression -> VARIABLE LSQUARE expression RSQUARE .

    EQUALS          shift and go to state 137
    SEMICOLON       reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    PLUS            reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    MINUS           reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    TIMES           reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    DIVIDE          reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    EXPONENT        reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    REMAINDER       reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    INFERIOR        reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    INFERIOR_OR_EQUAL reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    SUPERIOR        reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    SUPERIOR_OR_EQUAL reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    DOUBLE_EQUALS   reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    DIFFERENT       reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)


state 106

    (53) expression -> VARIABLE LSQUARE expression COLON . expression RSQUARE
    (55) expression -> VARIABLE LSQUARE expression COLON . RSQUARE
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    RSQUARE         shift and go to state 139
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 138

state 107

    (54) expression -> VARIABLE LSQUARE COLON expression . RSQUARE
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    RSQUARE         shift and go to state 140
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39


state 108

    (56) expression -> VARIABLE LSQUARE COLON RSQUARE .

    SEMICOLON       reduce using rule 56 (expression -> VARIABLE LSQUARE COLON RSQUARE .)
    PLUS            reduce using rule 56 (expression -> VARIABLE LSQUARE COLON RSQUARE .)
    MINUS           reduce using rule 56 (expression -> VARIABLE LSQUARE COLON RSQUARE .)
    TIMES           reduce using rule 56 (expression -> VARIABLE LSQUARE COLON RSQUARE .)
    DIVIDE          reduce using rule 56 (expression -> VARIABLE LSQUARE COLON RSQUARE .)
    EXPONENT        reduce using rule 56 (expression -> VARIABLE LSQUARE COLON RSQUARE .)
    REMAINDER       reduce using rule 56 (expression -> VARIABLE LSQUARE COLON RSQUARE .)
    INFERIOR        reduce using rule 56 (expression -> VARIABLE LSQUARE COLON RSQUARE .)
    INFERIOR_OR_EQUAL reduce using rule 56 (expression -> VARIABLE LSQUARE COLON RSQUARE .)
    SUPERIOR        reduce using rule 56 (expression -> VARIABLE LSQUARE COLON RSQUARE .)
    SUPERIOR_OR_EQUAL reduce using rule 56 (expression -> VARIABLE LSQUARE COLON RSQUARE .)
    DOUBLE_EQUALS   reduce using rule 56 (expression -> VARIABLE LSQUARE COLON RSQUARE .)
    DIFFERENT       reduce using rule 56 (expression -> VARIABLE LSQUARE COLON RSQUARE .)
    RPAREN          reduce using rule 56 (expression -> VARIABLE LSQUARE COLON RSQUARE .)
    RSQUARE         reduce using rule 56 (expression -> VARIABLE LSQUARE COLON RSQUARE .)
    SEPARATOR       reduce using rule 56 (expression -> VARIABLE LSQUARE COLON RSQUARE .)
    TO              reduce using rule 56 (expression -> VARIABLE LSQUARE COLON RSQUARE .)
    COLON           reduce using rule 56 (expression -> VARIABLE LSQUARE COLON RSQUARE .)


state 109

    (21) statement -> VARIABLE LPAREN cargument RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 141


state 110

    (22) statement -> VARIABLE LPAREN RPAREN SEMICOLON .

    IF              reduce using rule 22 (statement -> VARIABLE LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 22 (statement -> VARIABLE LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 22 (statement -> VARIABLE LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 22 (statement -> VARIABLE LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 22 (statement -> VARIABLE LPAREN RPAREN SEMICOLON .)
    ADDRESS         reduce using rule 22 (statement -> VARIABLE LPAREN RPAREN SEMICOLON .)
    VAR             reduce using rule 22 (statement -> VARIABLE LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 22 (statement -> VARIABLE LPAREN RPAREN SEMICOLON .)
    DEF             reduce using rule 22 (statement -> VARIABLE LPAREN RPAREN SEMICOLON .)
    DELETE          reduce using rule 22 (statement -> VARIABLE LPAREN RPAREN SEMICOLON .)
    MINUS           reduce using rule 22 (statement -> VARIABLE LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 22 (statement -> VARIABLE LPAREN RPAREN SEMICOLON .)
    LSQUARE         reduce using rule 22 (statement -> VARIABLE LPAREN RPAREN SEMICOLON .)
    TYPEOF          reduce using rule 22 (statement -> VARIABLE LPAREN RPAREN SEMICOLON .)
    LENGTH          reduce using rule 22 (statement -> VARIABLE LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 22 (statement -> VARIABLE LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 22 (statement -> VARIABLE LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 22 (statement -> VARIABLE LPAREN RPAREN SEMICOLON .)
    END             reduce using rule 22 (statement -> VARIABLE LPAREN RPAREN SEMICOLON .)
    ELSE            reduce using rule 22 (statement -> VARIABLE LPAREN RPAREN SEMICOLON .)


state 111

    (11) statement -> ADDRESS VARIABLE EQUALS expression . SEMICOLON
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    SEMICOLON       shift and go to state 142
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39


state 112

    (13) statement -> ADDRESS VARIABLE LSQUARE expression . RSQUARE EQUALS expression SEMICOLON
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    RSQUARE         shift and go to state 143
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39


state 113

    (49) expression -> LSQUARE UNPACK VARIABLE RSQUARE .

    SEMICOLON       reduce using rule 49 (expression -> LSQUARE UNPACK VARIABLE RSQUARE .)
    PLUS            reduce using rule 49 (expression -> LSQUARE UNPACK VARIABLE RSQUARE .)
    MINUS           reduce using rule 49 (expression -> LSQUARE UNPACK VARIABLE RSQUARE .)
    TIMES           reduce using rule 49 (expression -> LSQUARE UNPACK VARIABLE RSQUARE .)
    DIVIDE          reduce using rule 49 (expression -> LSQUARE UNPACK VARIABLE RSQUARE .)
    EXPONENT        reduce using rule 49 (expression -> LSQUARE UNPACK VARIABLE RSQUARE .)
    REMAINDER       reduce using rule 49 (expression -> LSQUARE UNPACK VARIABLE RSQUARE .)
    INFERIOR        reduce using rule 49 (expression -> LSQUARE UNPACK VARIABLE RSQUARE .)
    INFERIOR_OR_EQUAL reduce using rule 49 (expression -> LSQUARE UNPACK VARIABLE RSQUARE .)
    SUPERIOR        reduce using rule 49 (expression -> LSQUARE UNPACK VARIABLE RSQUARE .)
    SUPERIOR_OR_EQUAL reduce using rule 49 (expression -> LSQUARE UNPACK VARIABLE RSQUARE .)
    DOUBLE_EQUALS   reduce using rule 49 (expression -> LSQUARE UNPACK VARIABLE RSQUARE .)
    DIFFERENT       reduce using rule 49 (expression -> LSQUARE UNPACK VARIABLE RSQUARE .)
    RPAREN          reduce using rule 49 (expression -> LSQUARE UNPACK VARIABLE RSQUARE .)
    RSQUARE         reduce using rule 49 (expression -> LSQUARE UNPACK VARIABLE RSQUARE .)
    SEPARATOR       reduce using rule 49 (expression -> LSQUARE UNPACK VARIABLE RSQUARE .)
    TO              reduce using rule 49 (expression -> LSQUARE UNPACK VARIABLE RSQUARE .)
    COLON           reduce using rule 49 (expression -> LSQUARE UNPACK VARIABLE RSQUARE .)


state 114

    (25) cargument -> cargument SEPARATOR expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    RSQUARE         reduce using rule 25 (cargument -> cargument SEPARATOR expression .)
    SEPARATOR       reduce using rule 25 (cargument -> cargument SEPARATOR expression .)
    RPAREN          reduce using rule 25 (cargument -> cargument SEPARATOR expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39


state 115

    (14) statement -> VAR VARIABLE EQUALS expression . SEMICOLON
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    SEMICOLON       shift and go to state 144
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39


state 116

    (15) statement -> VAR VARIABLE EQUALS ADDRESS . VARIABLE SEMICOLON

    VARIABLE        shift and go to state 145


state 117

    (16) statement -> CONST VARIABLE EQUALS expression . SEMICOLON
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    SEMICOLON       shift and go to state 146
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39


state 118

    (17) statement -> CONST VARIABLE EQUALS ADDRESS . VARIABLE SEMICOLON

    VARIABLE        shift and go to state 147


state 119

    (18) statement -> CONST VARIABLE EQUALS LSQUARE . cargument RSQUARE SEMICOLON
    (49) expression -> LSQUARE . UNPACK VARIABLE RSQUARE
    (59) expression -> LSQUARE . cargument RSQUARE
    (25) cargument -> . cargument SEPARATOR expression
    (26) cargument -> . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    UNPACK          shift and go to state 46
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    cargument                      shift and go to state 148
    expression                     shift and go to state 48

state 120

    (24) dargument -> VARIABLE .

    RPAREN          reduce using rule 24 (dargument -> VARIABLE .)
    SEPARATOR       reduce using rule 24 (dargument -> VARIABLE .)


state 121

    (19) statement -> DEF VARIABLE LPAREN dargument . RPAREN DO block END
    (23) dargument -> dargument . SEPARATOR VARIABLE

    RPAREN          shift and go to state 149
    SEPARATOR       shift and go to state 150


state 122

    (20) statement -> DEF VARIABLE LPAREN RPAREN . DO block END

    DO              shift and go to state 151


state 123

    (50) expression -> TYPEOF LPAREN VARIABLE RPAREN .

    SEMICOLON       reduce using rule 50 (expression -> TYPEOF LPAREN VARIABLE RPAREN .)
    PLUS            reduce using rule 50 (expression -> TYPEOF LPAREN VARIABLE RPAREN .)
    MINUS           reduce using rule 50 (expression -> TYPEOF LPAREN VARIABLE RPAREN .)
    TIMES           reduce using rule 50 (expression -> TYPEOF LPAREN VARIABLE RPAREN .)
    DIVIDE          reduce using rule 50 (expression -> TYPEOF LPAREN VARIABLE RPAREN .)
    EXPONENT        reduce using rule 50 (expression -> TYPEOF LPAREN VARIABLE RPAREN .)
    REMAINDER       reduce using rule 50 (expression -> TYPEOF LPAREN VARIABLE RPAREN .)
    INFERIOR        reduce using rule 50 (expression -> TYPEOF LPAREN VARIABLE RPAREN .)
    INFERIOR_OR_EQUAL reduce using rule 50 (expression -> TYPEOF LPAREN VARIABLE RPAREN .)
    SUPERIOR        reduce using rule 50 (expression -> TYPEOF LPAREN VARIABLE RPAREN .)
    SUPERIOR_OR_EQUAL reduce using rule 50 (expression -> TYPEOF LPAREN VARIABLE RPAREN .)
    DOUBLE_EQUALS   reduce using rule 50 (expression -> TYPEOF LPAREN VARIABLE RPAREN .)
    DIFFERENT       reduce using rule 50 (expression -> TYPEOF LPAREN VARIABLE RPAREN .)
    RPAREN          reduce using rule 50 (expression -> TYPEOF LPAREN VARIABLE RPAREN .)
    RSQUARE         reduce using rule 50 (expression -> TYPEOF LPAREN VARIABLE RPAREN .)
    SEPARATOR       reduce using rule 50 (expression -> TYPEOF LPAREN VARIABLE RPAREN .)
    TO              reduce using rule 50 (expression -> TYPEOF LPAREN VARIABLE RPAREN .)
    COLON           reduce using rule 50 (expression -> TYPEOF LPAREN VARIABLE RPAREN .)


state 124

    (51) expression -> LENGTH LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 51 (expression -> LENGTH LPAREN expression RPAREN .)
    PLUS            reduce using rule 51 (expression -> LENGTH LPAREN expression RPAREN .)
    MINUS           reduce using rule 51 (expression -> LENGTH LPAREN expression RPAREN .)
    TIMES           reduce using rule 51 (expression -> LENGTH LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 51 (expression -> LENGTH LPAREN expression RPAREN .)
    EXPONENT        reduce using rule 51 (expression -> LENGTH LPAREN expression RPAREN .)
    REMAINDER       reduce using rule 51 (expression -> LENGTH LPAREN expression RPAREN .)
    INFERIOR        reduce using rule 51 (expression -> LENGTH LPAREN expression RPAREN .)
    INFERIOR_OR_EQUAL reduce using rule 51 (expression -> LENGTH LPAREN expression RPAREN .)
    SUPERIOR        reduce using rule 51 (expression -> LENGTH LPAREN expression RPAREN .)
    SUPERIOR_OR_EQUAL reduce using rule 51 (expression -> LENGTH LPAREN expression RPAREN .)
    DOUBLE_EQUALS   reduce using rule 51 (expression -> LENGTH LPAREN expression RPAREN .)
    DIFFERENT       reduce using rule 51 (expression -> LENGTH LPAREN expression RPAREN .)
    RPAREN          reduce using rule 51 (expression -> LENGTH LPAREN expression RPAREN .)
    RSQUARE         reduce using rule 51 (expression -> LENGTH LPAREN expression RPAREN .)
    SEPARATOR       reduce using rule 51 (expression -> LENGTH LPAREN expression RPAREN .)
    TO              reduce using rule 51 (expression -> LENGTH LPAREN expression RPAREN .)
    COLON           reduce using rule 51 (expression -> LENGTH LPAREN expression RPAREN .)


state 125

    (4) statement -> IF LPAREN comparison RPAREN THEN . block END
    (5) statement -> IF LPAREN comparison RPAREN THEN . block ELSE block END
    (2) block -> . block statement
    (3) block -> . statement
    (4) statement -> . IF LPAREN comparison RPAREN THEN block END
    (5) statement -> . IF LPAREN comparison RPAREN THEN block ELSE block END
    (6) statement -> . FOR LPAREN expression TO expression RPAREN NEXT block END
    (7) statement -> . WHILE LPAREN comparison RPAREN NEXT block END
    (8) statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (9) statement -> . VARIABLE EQUALS expression SEMICOLON
    (10) statement -> . VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (11) statement -> . ADDRESS VARIABLE EQUALS expression SEMICOLON
    (12) statement -> . VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (13) statement -> . ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (14) statement -> . VAR VARIABLE EQUALS expression SEMICOLON
    (15) statement -> . VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (16) statement -> . CONST VARIABLE EQUALS expression SEMICOLON
    (17) statement -> . CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (18) statement -> . CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON
    (19) statement -> . DEF VARIABLE LPAREN dargument RPAREN DO block END
    (20) statement -> . DEF VARIABLE LPAREN RPAREN DO block END
    (21) statement -> . VARIABLE LPAREN cargument RPAREN SEMICOLON
    (22) statement -> . VARIABLE LPAREN RPAREN SEMICOLON
    (27) statement -> . DELETE VARIABLE SEMICOLON
    (28) statement -> . expression SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    IF              shift and go to state 4
    FOR             shift and go to state 6
    WHILE           shift and go to state 8
    PRINT           shift and go to state 9
    VARIABLE        shift and go to state 10
    ADDRESS         shift and go to state 11
    VAR             shift and go to state 13
    CONST           shift and go to state 14
    DEF             shift and go to state 15
    DELETE          shift and go to state 16
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    block                          shift and go to state 152
    statement                      shift and go to state 3
    expression                     shift and go to state 7

state 126

    (29) comparison -> expression INFERIOR expression .
    (41) expression -> expression INFERIOR expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for REMAINDER resolved as shift
  ! shift/reduce conflict for INFERIOR resolved as shift
  ! shift/reduce conflict for INFERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SUPERIOR resolved as shift
  ! shift/reduce conflict for SUPERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
    RPAREN          reduce using rule 29 (comparison -> expression INFERIOR expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39

  ! INFERIOR        [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! INFERIOR_OR_EQUAL [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! SUPERIOR        [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! SUPERIOR_OR_EQUAL [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! DIFFERENT       [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! PLUS            [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! TIMES           [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! EXPONENT        [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]
  ! REMAINDER       [ reduce using rule 41 (expression -> expression INFERIOR expression .) ]


state 127

    (30) comparison -> expression INFERIOR_OR_EQUAL expression .
    (42) expression -> expression INFERIOR_OR_EQUAL expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for REMAINDER resolved as shift
  ! shift/reduce conflict for INFERIOR resolved as shift
  ! shift/reduce conflict for INFERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SUPERIOR resolved as shift
  ! shift/reduce conflict for SUPERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
    RPAREN          reduce using rule 30 (comparison -> expression INFERIOR_OR_EQUAL expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39

  ! INFERIOR        [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! INFERIOR_OR_EQUAL [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! SUPERIOR        [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! SUPERIOR_OR_EQUAL [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! DIFFERENT       [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! PLUS            [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! EXPONENT        [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]
  ! REMAINDER       [ reduce using rule 42 (expression -> expression INFERIOR_OR_EQUAL expression .) ]


state 128

    (31) comparison -> expression SUPERIOR expression .
    (43) expression -> expression SUPERIOR expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for REMAINDER resolved as shift
  ! shift/reduce conflict for INFERIOR resolved as shift
  ! shift/reduce conflict for INFERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SUPERIOR resolved as shift
  ! shift/reduce conflict for SUPERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
    RPAREN          reduce using rule 31 (comparison -> expression SUPERIOR expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39

  ! INFERIOR        [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! INFERIOR_OR_EQUAL [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! SUPERIOR        [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! SUPERIOR_OR_EQUAL [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! DIFFERENT       [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! PLUS            [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! TIMES           [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! EXPONENT        [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]
  ! REMAINDER       [ reduce using rule 43 (expression -> expression SUPERIOR expression .) ]


state 129

    (32) comparison -> expression SUPERIOR_OR_EQUAL expression .
    (44) expression -> expression SUPERIOR_OR_EQUAL expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for REMAINDER resolved as shift
  ! shift/reduce conflict for INFERIOR resolved as shift
  ! shift/reduce conflict for INFERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SUPERIOR resolved as shift
  ! shift/reduce conflict for SUPERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
    RPAREN          reduce using rule 32 (comparison -> expression SUPERIOR_OR_EQUAL expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39

  ! INFERIOR        [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! INFERIOR_OR_EQUAL [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! SUPERIOR        [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! SUPERIOR_OR_EQUAL [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! DIFFERENT       [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! PLUS            [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! EXPONENT        [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]
  ! REMAINDER       [ reduce using rule 44 (expression -> expression SUPERIOR_OR_EQUAL expression .) ]


state 130

    (33) comparison -> expression DOUBLE_EQUALS expression .
    (45) expression -> expression DOUBLE_EQUALS expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for REMAINDER resolved as shift
  ! shift/reduce conflict for INFERIOR resolved as shift
  ! shift/reduce conflict for INFERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SUPERIOR resolved as shift
  ! shift/reduce conflict for SUPERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
    RPAREN          reduce using rule 33 (comparison -> expression DOUBLE_EQUALS expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39

  ! INFERIOR        [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! INFERIOR_OR_EQUAL [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! SUPERIOR        [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! SUPERIOR_OR_EQUAL [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! DIFFERENT       [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! PLUS            [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! TIMES           [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! EXPONENT        [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]
  ! REMAINDER       [ reduce using rule 45 (expression -> expression DOUBLE_EQUALS expression .) ]


state 131

    (34) comparison -> expression DIFFERENT expression .
    (46) expression -> expression DIFFERENT expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for REMAINDER resolved as shift
  ! shift/reduce conflict for INFERIOR resolved as shift
  ! shift/reduce conflict for INFERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SUPERIOR resolved as shift
  ! shift/reduce conflict for SUPERIOR_OR_EQUAL resolved as shift
  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
    RPAREN          reduce using rule 34 (comparison -> expression DIFFERENT expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39

  ! INFERIOR        [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! INFERIOR_OR_EQUAL [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! SUPERIOR        [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! SUPERIOR_OR_EQUAL [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! DIFFERENT       [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! PLUS            [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! MINUS           [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! TIMES           [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! EXPONENT        [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]
  ! REMAINDER       [ reduce using rule 46 (expression -> expression DIFFERENT expression .) ]


state 132

    (52) expression -> VARIABLE LSQUARE expression RSQUARE .

    RPAREN          reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    PLUS            reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    MINUS           reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    TIMES           reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    DIVIDE          reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    EXPONENT        reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    REMAINDER       reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    INFERIOR        reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    INFERIOR_OR_EQUAL reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    SUPERIOR        reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    SUPERIOR_OR_EQUAL reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    DOUBLE_EQUALS   reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    DIFFERENT       reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    RSQUARE         reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    SEPARATOR       reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    SEMICOLON       reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    TO              reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)
    COLON           reduce using rule 52 (expression -> VARIABLE LSQUARE expression RSQUARE .)


state 133

    (6) statement -> FOR LPAREN expression TO expression . RPAREN NEXT block END
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    RPAREN          shift and go to state 153
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39


state 134

    (7) statement -> WHILE LPAREN comparison RPAREN NEXT . block END
    (2) block -> . block statement
    (3) block -> . statement
    (4) statement -> . IF LPAREN comparison RPAREN THEN block END
    (5) statement -> . IF LPAREN comparison RPAREN THEN block ELSE block END
    (6) statement -> . FOR LPAREN expression TO expression RPAREN NEXT block END
    (7) statement -> . WHILE LPAREN comparison RPAREN NEXT block END
    (8) statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (9) statement -> . VARIABLE EQUALS expression SEMICOLON
    (10) statement -> . VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (11) statement -> . ADDRESS VARIABLE EQUALS expression SEMICOLON
    (12) statement -> . VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (13) statement -> . ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (14) statement -> . VAR VARIABLE EQUALS expression SEMICOLON
    (15) statement -> . VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (16) statement -> . CONST VARIABLE EQUALS expression SEMICOLON
    (17) statement -> . CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (18) statement -> . CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON
    (19) statement -> . DEF VARIABLE LPAREN dargument RPAREN DO block END
    (20) statement -> . DEF VARIABLE LPAREN RPAREN DO block END
    (21) statement -> . VARIABLE LPAREN cargument RPAREN SEMICOLON
    (22) statement -> . VARIABLE LPAREN RPAREN SEMICOLON
    (27) statement -> . DELETE VARIABLE SEMICOLON
    (28) statement -> . expression SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    IF              shift and go to state 4
    FOR             shift and go to state 6
    WHILE           shift and go to state 8
    PRINT           shift and go to state 9
    VARIABLE        shift and go to state 10
    ADDRESS         shift and go to state 11
    VAR             shift and go to state 13
    CONST           shift and go to state 14
    DEF             shift and go to state 15
    DELETE          shift and go to state 16
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    block                          shift and go to state 154
    statement                      shift and go to state 3
    expression                     shift and go to state 7

state 135

    (8) statement -> PRINT LPAREN expression RPAREN SEMICOLON .

    IF              reduce using rule 8 (statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 8 (statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 8 (statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 8 (statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 8 (statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    ADDRESS         reduce using rule 8 (statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    VAR             reduce using rule 8 (statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    CONST           reduce using rule 8 (statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    DEF             reduce using rule 8 (statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    DELETE          reduce using rule 8 (statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 8 (statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 8 (statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    LSQUARE         reduce using rule 8 (statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    TYPEOF          reduce using rule 8 (statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    LENGTH          reduce using rule 8 (statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    NUMBER          reduce using rule 8 (statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    STRING          reduce using rule 8 (statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 8 (statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    END             reduce using rule 8 (statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 8 (statement -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 136

    (10) statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .

    IF              reduce using rule 10 (statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    FOR             reduce using rule 10 (statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    WHILE           reduce using rule 10 (statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    PRINT           reduce using rule 10 (statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 10 (statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    ADDRESS         reduce using rule 10 (statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    VAR             reduce using rule 10 (statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    CONST           reduce using rule 10 (statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    DEF             reduce using rule 10 (statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    DELETE          reduce using rule 10 (statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    MINUS           reduce using rule 10 (statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    LPAREN          reduce using rule 10 (statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    LSQUARE         reduce using rule 10 (statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    TYPEOF          reduce using rule 10 (statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    LENGTH          reduce using rule 10 (statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    NUMBER          reduce using rule 10 (statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    STRING          reduce using rule 10 (statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    $end            reduce using rule 10 (statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    END             reduce using rule 10 (statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    ELSE            reduce using rule 10 (statement -> VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)


state 137

    (12) statement -> VARIABLE LSQUARE expression RSQUARE EQUALS . expression SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 155

state 138

    (53) expression -> VARIABLE LSQUARE expression COLON expression . RSQUARE
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    RSQUARE         shift and go to state 156
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39


state 139

    (55) expression -> VARIABLE LSQUARE expression COLON RSQUARE .

    SEMICOLON       reduce using rule 55 (expression -> VARIABLE LSQUARE expression COLON RSQUARE .)
    PLUS            reduce using rule 55 (expression -> VARIABLE LSQUARE expression COLON RSQUARE .)
    MINUS           reduce using rule 55 (expression -> VARIABLE LSQUARE expression COLON RSQUARE .)
    TIMES           reduce using rule 55 (expression -> VARIABLE LSQUARE expression COLON RSQUARE .)
    DIVIDE          reduce using rule 55 (expression -> VARIABLE LSQUARE expression COLON RSQUARE .)
    EXPONENT        reduce using rule 55 (expression -> VARIABLE LSQUARE expression COLON RSQUARE .)
    REMAINDER       reduce using rule 55 (expression -> VARIABLE LSQUARE expression COLON RSQUARE .)
    INFERIOR        reduce using rule 55 (expression -> VARIABLE LSQUARE expression COLON RSQUARE .)
    INFERIOR_OR_EQUAL reduce using rule 55 (expression -> VARIABLE LSQUARE expression COLON RSQUARE .)
    SUPERIOR        reduce using rule 55 (expression -> VARIABLE LSQUARE expression COLON RSQUARE .)
    SUPERIOR_OR_EQUAL reduce using rule 55 (expression -> VARIABLE LSQUARE expression COLON RSQUARE .)
    DOUBLE_EQUALS   reduce using rule 55 (expression -> VARIABLE LSQUARE expression COLON RSQUARE .)
    DIFFERENT       reduce using rule 55 (expression -> VARIABLE LSQUARE expression COLON RSQUARE .)
    RPAREN          reduce using rule 55 (expression -> VARIABLE LSQUARE expression COLON RSQUARE .)
    RSQUARE         reduce using rule 55 (expression -> VARIABLE LSQUARE expression COLON RSQUARE .)
    SEPARATOR       reduce using rule 55 (expression -> VARIABLE LSQUARE expression COLON RSQUARE .)
    TO              reduce using rule 55 (expression -> VARIABLE LSQUARE expression COLON RSQUARE .)
    COLON           reduce using rule 55 (expression -> VARIABLE LSQUARE expression COLON RSQUARE .)


state 140

    (54) expression -> VARIABLE LSQUARE COLON expression RSQUARE .

    SEMICOLON       reduce using rule 54 (expression -> VARIABLE LSQUARE COLON expression RSQUARE .)
    PLUS            reduce using rule 54 (expression -> VARIABLE LSQUARE COLON expression RSQUARE .)
    MINUS           reduce using rule 54 (expression -> VARIABLE LSQUARE COLON expression RSQUARE .)
    TIMES           reduce using rule 54 (expression -> VARIABLE LSQUARE COLON expression RSQUARE .)
    DIVIDE          reduce using rule 54 (expression -> VARIABLE LSQUARE COLON expression RSQUARE .)
    EXPONENT        reduce using rule 54 (expression -> VARIABLE LSQUARE COLON expression RSQUARE .)
    REMAINDER       reduce using rule 54 (expression -> VARIABLE LSQUARE COLON expression RSQUARE .)
    INFERIOR        reduce using rule 54 (expression -> VARIABLE LSQUARE COLON expression RSQUARE .)
    INFERIOR_OR_EQUAL reduce using rule 54 (expression -> VARIABLE LSQUARE COLON expression RSQUARE .)
    SUPERIOR        reduce using rule 54 (expression -> VARIABLE LSQUARE COLON expression RSQUARE .)
    SUPERIOR_OR_EQUAL reduce using rule 54 (expression -> VARIABLE LSQUARE COLON expression RSQUARE .)
    DOUBLE_EQUALS   reduce using rule 54 (expression -> VARIABLE LSQUARE COLON expression RSQUARE .)
    DIFFERENT       reduce using rule 54 (expression -> VARIABLE LSQUARE COLON expression RSQUARE .)
    RPAREN          reduce using rule 54 (expression -> VARIABLE LSQUARE COLON expression RSQUARE .)
    RSQUARE         reduce using rule 54 (expression -> VARIABLE LSQUARE COLON expression RSQUARE .)
    SEPARATOR       reduce using rule 54 (expression -> VARIABLE LSQUARE COLON expression RSQUARE .)
    TO              reduce using rule 54 (expression -> VARIABLE LSQUARE COLON expression RSQUARE .)
    COLON           reduce using rule 54 (expression -> VARIABLE LSQUARE COLON expression RSQUARE .)


state 141

    (21) statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON .

    IF              reduce using rule 21 (statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON .)
    FOR             reduce using rule 21 (statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON .)
    WHILE           reduce using rule 21 (statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON .)
    PRINT           reduce using rule 21 (statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 21 (statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON .)
    ADDRESS         reduce using rule 21 (statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON .)
    VAR             reduce using rule 21 (statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON .)
    CONST           reduce using rule 21 (statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON .)
    DEF             reduce using rule 21 (statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON .)
    DELETE          reduce using rule 21 (statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON .)
    MINUS           reduce using rule 21 (statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON .)
    LPAREN          reduce using rule 21 (statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON .)
    LSQUARE         reduce using rule 21 (statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON .)
    TYPEOF          reduce using rule 21 (statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON .)
    LENGTH          reduce using rule 21 (statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON .)
    NUMBER          reduce using rule 21 (statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON .)
    STRING          reduce using rule 21 (statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON .)
    $end            reduce using rule 21 (statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON .)
    END             reduce using rule 21 (statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON .)
    ELSE            reduce using rule 21 (statement -> VARIABLE LPAREN cargument RPAREN SEMICOLON .)


state 142

    (11) statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON .

    IF              reduce using rule 11 (statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON .)
    FOR             reduce using rule 11 (statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 11 (statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON .)
    PRINT           reduce using rule 11 (statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON .)
    VARIABLE        reduce using rule 11 (statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON .)
    ADDRESS         reduce using rule 11 (statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON .)
    VAR             reduce using rule 11 (statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON .)
    CONST           reduce using rule 11 (statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON .)
    DEF             reduce using rule 11 (statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON .)
    DELETE          reduce using rule 11 (statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON .)
    MINUS           reduce using rule 11 (statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON .)
    LPAREN          reduce using rule 11 (statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON .)
    LSQUARE         reduce using rule 11 (statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON .)
    TYPEOF          reduce using rule 11 (statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON .)
    LENGTH          reduce using rule 11 (statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON .)
    NUMBER          reduce using rule 11 (statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON .)
    STRING          reduce using rule 11 (statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON .)
    $end            reduce using rule 11 (statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON .)
    END             reduce using rule 11 (statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON .)
    ELSE            reduce using rule 11 (statement -> ADDRESS VARIABLE EQUALS expression SEMICOLON .)


state 143

    (13) statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 157


state 144

    (14) statement -> VAR VARIABLE EQUALS expression SEMICOLON .

    IF              reduce using rule 14 (statement -> VAR VARIABLE EQUALS expression SEMICOLON .)
    FOR             reduce using rule 14 (statement -> VAR VARIABLE EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 14 (statement -> VAR VARIABLE EQUALS expression SEMICOLON .)
    PRINT           reduce using rule 14 (statement -> VAR VARIABLE EQUALS expression SEMICOLON .)
    VARIABLE        reduce using rule 14 (statement -> VAR VARIABLE EQUALS expression SEMICOLON .)
    ADDRESS         reduce using rule 14 (statement -> VAR VARIABLE EQUALS expression SEMICOLON .)
    VAR             reduce using rule 14 (statement -> VAR VARIABLE EQUALS expression SEMICOLON .)
    CONST           reduce using rule 14 (statement -> VAR VARIABLE EQUALS expression SEMICOLON .)
    DEF             reduce using rule 14 (statement -> VAR VARIABLE EQUALS expression SEMICOLON .)
    DELETE          reduce using rule 14 (statement -> VAR VARIABLE EQUALS expression SEMICOLON .)
    MINUS           reduce using rule 14 (statement -> VAR VARIABLE EQUALS expression SEMICOLON .)
    LPAREN          reduce using rule 14 (statement -> VAR VARIABLE EQUALS expression SEMICOLON .)
    LSQUARE         reduce using rule 14 (statement -> VAR VARIABLE EQUALS expression SEMICOLON .)
    TYPEOF          reduce using rule 14 (statement -> VAR VARIABLE EQUALS expression SEMICOLON .)
    LENGTH          reduce using rule 14 (statement -> VAR VARIABLE EQUALS expression SEMICOLON .)
    NUMBER          reduce using rule 14 (statement -> VAR VARIABLE EQUALS expression SEMICOLON .)
    STRING          reduce using rule 14 (statement -> VAR VARIABLE EQUALS expression SEMICOLON .)
    $end            reduce using rule 14 (statement -> VAR VARIABLE EQUALS expression SEMICOLON .)
    END             reduce using rule 14 (statement -> VAR VARIABLE EQUALS expression SEMICOLON .)
    ELSE            reduce using rule 14 (statement -> VAR VARIABLE EQUALS expression SEMICOLON .)


state 145

    (15) statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE . SEMICOLON

    SEMICOLON       shift and go to state 158


state 146

    (16) statement -> CONST VARIABLE EQUALS expression SEMICOLON .

    IF              reduce using rule 16 (statement -> CONST VARIABLE EQUALS expression SEMICOLON .)
    FOR             reduce using rule 16 (statement -> CONST VARIABLE EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 16 (statement -> CONST VARIABLE EQUALS expression SEMICOLON .)
    PRINT           reduce using rule 16 (statement -> CONST VARIABLE EQUALS expression SEMICOLON .)
    VARIABLE        reduce using rule 16 (statement -> CONST VARIABLE EQUALS expression SEMICOLON .)
    ADDRESS         reduce using rule 16 (statement -> CONST VARIABLE EQUALS expression SEMICOLON .)
    VAR             reduce using rule 16 (statement -> CONST VARIABLE EQUALS expression SEMICOLON .)
    CONST           reduce using rule 16 (statement -> CONST VARIABLE EQUALS expression SEMICOLON .)
    DEF             reduce using rule 16 (statement -> CONST VARIABLE EQUALS expression SEMICOLON .)
    DELETE          reduce using rule 16 (statement -> CONST VARIABLE EQUALS expression SEMICOLON .)
    MINUS           reduce using rule 16 (statement -> CONST VARIABLE EQUALS expression SEMICOLON .)
    LPAREN          reduce using rule 16 (statement -> CONST VARIABLE EQUALS expression SEMICOLON .)
    LSQUARE         reduce using rule 16 (statement -> CONST VARIABLE EQUALS expression SEMICOLON .)
    TYPEOF          reduce using rule 16 (statement -> CONST VARIABLE EQUALS expression SEMICOLON .)
    LENGTH          reduce using rule 16 (statement -> CONST VARIABLE EQUALS expression SEMICOLON .)
    NUMBER          reduce using rule 16 (statement -> CONST VARIABLE EQUALS expression SEMICOLON .)
    STRING          reduce using rule 16 (statement -> CONST VARIABLE EQUALS expression SEMICOLON .)
    $end            reduce using rule 16 (statement -> CONST VARIABLE EQUALS expression SEMICOLON .)
    END             reduce using rule 16 (statement -> CONST VARIABLE EQUALS expression SEMICOLON .)
    ELSE            reduce using rule 16 (statement -> CONST VARIABLE EQUALS expression SEMICOLON .)


state 147

    (17) statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE . SEMICOLON

    SEMICOLON       shift and go to state 159


state 148

    (18) statement -> CONST VARIABLE EQUALS LSQUARE cargument . RSQUARE SEMICOLON
    (59) expression -> LSQUARE cargument . RSQUARE
    (25) cargument -> cargument . SEPARATOR expression

    RSQUARE         shift and go to state 160
    SEPARATOR       shift and go to state 85


state 149

    (19) statement -> DEF VARIABLE LPAREN dargument RPAREN . DO block END

    DO              shift and go to state 161


state 150

    (23) dargument -> dargument SEPARATOR . VARIABLE

    VARIABLE        shift and go to state 162


state 151

    (20) statement -> DEF VARIABLE LPAREN RPAREN DO . block END
    (2) block -> . block statement
    (3) block -> . statement
    (4) statement -> . IF LPAREN comparison RPAREN THEN block END
    (5) statement -> . IF LPAREN comparison RPAREN THEN block ELSE block END
    (6) statement -> . FOR LPAREN expression TO expression RPAREN NEXT block END
    (7) statement -> . WHILE LPAREN comparison RPAREN NEXT block END
    (8) statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (9) statement -> . VARIABLE EQUALS expression SEMICOLON
    (10) statement -> . VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (11) statement -> . ADDRESS VARIABLE EQUALS expression SEMICOLON
    (12) statement -> . VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (13) statement -> . ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (14) statement -> . VAR VARIABLE EQUALS expression SEMICOLON
    (15) statement -> . VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (16) statement -> . CONST VARIABLE EQUALS expression SEMICOLON
    (17) statement -> . CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (18) statement -> . CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON
    (19) statement -> . DEF VARIABLE LPAREN dargument RPAREN DO block END
    (20) statement -> . DEF VARIABLE LPAREN RPAREN DO block END
    (21) statement -> . VARIABLE LPAREN cargument RPAREN SEMICOLON
    (22) statement -> . VARIABLE LPAREN RPAREN SEMICOLON
    (27) statement -> . DELETE VARIABLE SEMICOLON
    (28) statement -> . expression SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    IF              shift and go to state 4
    FOR             shift and go to state 6
    WHILE           shift and go to state 8
    PRINT           shift and go to state 9
    VARIABLE        shift and go to state 10
    ADDRESS         shift and go to state 11
    VAR             shift and go to state 13
    CONST           shift and go to state 14
    DEF             shift and go to state 15
    DELETE          shift and go to state 16
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    block                          shift and go to state 163
    statement                      shift and go to state 3
    expression                     shift and go to state 7

state 152

    (4) statement -> IF LPAREN comparison RPAREN THEN block . END
    (5) statement -> IF LPAREN comparison RPAREN THEN block . ELSE block END
    (2) block -> block . statement
    (4) statement -> . IF LPAREN comparison RPAREN THEN block END
    (5) statement -> . IF LPAREN comparison RPAREN THEN block ELSE block END
    (6) statement -> . FOR LPAREN expression TO expression RPAREN NEXT block END
    (7) statement -> . WHILE LPAREN comparison RPAREN NEXT block END
    (8) statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (9) statement -> . VARIABLE EQUALS expression SEMICOLON
    (10) statement -> . VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (11) statement -> . ADDRESS VARIABLE EQUALS expression SEMICOLON
    (12) statement -> . VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (13) statement -> . ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (14) statement -> . VAR VARIABLE EQUALS expression SEMICOLON
    (15) statement -> . VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (16) statement -> . CONST VARIABLE EQUALS expression SEMICOLON
    (17) statement -> . CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (18) statement -> . CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON
    (19) statement -> . DEF VARIABLE LPAREN dargument RPAREN DO block END
    (20) statement -> . DEF VARIABLE LPAREN RPAREN DO block END
    (21) statement -> . VARIABLE LPAREN cargument RPAREN SEMICOLON
    (22) statement -> . VARIABLE LPAREN RPAREN SEMICOLON
    (27) statement -> . DELETE VARIABLE SEMICOLON
    (28) statement -> . expression SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    END             shift and go to state 164
    ELSE            shift and go to state 165
    IF              shift and go to state 4
    FOR             shift and go to state 6
    WHILE           shift and go to state 8
    PRINT           shift and go to state 9
    VARIABLE        shift and go to state 10
    ADDRESS         shift and go to state 11
    VAR             shift and go to state 13
    CONST           shift and go to state 14
    DEF             shift and go to state 15
    DELETE          shift and go to state 16
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    statement                      shift and go to state 22
    expression                     shift and go to state 7

state 153

    (6) statement -> FOR LPAREN expression TO expression RPAREN . NEXT block END

    NEXT            shift and go to state 166


state 154

    (7) statement -> WHILE LPAREN comparison RPAREN NEXT block . END
    (2) block -> block . statement
    (4) statement -> . IF LPAREN comparison RPAREN THEN block END
    (5) statement -> . IF LPAREN comparison RPAREN THEN block ELSE block END
    (6) statement -> . FOR LPAREN expression TO expression RPAREN NEXT block END
    (7) statement -> . WHILE LPAREN comparison RPAREN NEXT block END
    (8) statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (9) statement -> . VARIABLE EQUALS expression SEMICOLON
    (10) statement -> . VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (11) statement -> . ADDRESS VARIABLE EQUALS expression SEMICOLON
    (12) statement -> . VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (13) statement -> . ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (14) statement -> . VAR VARIABLE EQUALS expression SEMICOLON
    (15) statement -> . VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (16) statement -> . CONST VARIABLE EQUALS expression SEMICOLON
    (17) statement -> . CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (18) statement -> . CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON
    (19) statement -> . DEF VARIABLE LPAREN dargument RPAREN DO block END
    (20) statement -> . DEF VARIABLE LPAREN RPAREN DO block END
    (21) statement -> . VARIABLE LPAREN cargument RPAREN SEMICOLON
    (22) statement -> . VARIABLE LPAREN RPAREN SEMICOLON
    (27) statement -> . DELETE VARIABLE SEMICOLON
    (28) statement -> . expression SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    END             shift and go to state 167
    IF              shift and go to state 4
    FOR             shift and go to state 6
    WHILE           shift and go to state 8
    PRINT           shift and go to state 9
    VARIABLE        shift and go to state 10
    ADDRESS         shift and go to state 11
    VAR             shift and go to state 13
    CONST           shift and go to state 14
    DEF             shift and go to state 15
    DELETE          shift and go to state 16
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    statement                      shift and go to state 22
    expression                     shift and go to state 7

state 155

    (12) statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression . SEMICOLON
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    SEMICOLON       shift and go to state 168
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39


state 156

    (53) expression -> VARIABLE LSQUARE expression COLON expression RSQUARE .

    SEMICOLON       reduce using rule 53 (expression -> VARIABLE LSQUARE expression COLON expression RSQUARE .)
    PLUS            reduce using rule 53 (expression -> VARIABLE LSQUARE expression COLON expression RSQUARE .)
    MINUS           reduce using rule 53 (expression -> VARIABLE LSQUARE expression COLON expression RSQUARE .)
    TIMES           reduce using rule 53 (expression -> VARIABLE LSQUARE expression COLON expression RSQUARE .)
    DIVIDE          reduce using rule 53 (expression -> VARIABLE LSQUARE expression COLON expression RSQUARE .)
    EXPONENT        reduce using rule 53 (expression -> VARIABLE LSQUARE expression COLON expression RSQUARE .)
    REMAINDER       reduce using rule 53 (expression -> VARIABLE LSQUARE expression COLON expression RSQUARE .)
    INFERIOR        reduce using rule 53 (expression -> VARIABLE LSQUARE expression COLON expression RSQUARE .)
    INFERIOR_OR_EQUAL reduce using rule 53 (expression -> VARIABLE LSQUARE expression COLON expression RSQUARE .)
    SUPERIOR        reduce using rule 53 (expression -> VARIABLE LSQUARE expression COLON expression RSQUARE .)
    SUPERIOR_OR_EQUAL reduce using rule 53 (expression -> VARIABLE LSQUARE expression COLON expression RSQUARE .)
    DOUBLE_EQUALS   reduce using rule 53 (expression -> VARIABLE LSQUARE expression COLON expression RSQUARE .)
    DIFFERENT       reduce using rule 53 (expression -> VARIABLE LSQUARE expression COLON expression RSQUARE .)
    RPAREN          reduce using rule 53 (expression -> VARIABLE LSQUARE expression COLON expression RSQUARE .)
    RSQUARE         reduce using rule 53 (expression -> VARIABLE LSQUARE expression COLON expression RSQUARE .)
    SEPARATOR       reduce using rule 53 (expression -> VARIABLE LSQUARE expression COLON expression RSQUARE .)
    TO              reduce using rule 53 (expression -> VARIABLE LSQUARE expression COLON expression RSQUARE .)
    COLON           reduce using rule 53 (expression -> VARIABLE LSQUARE expression COLON expression RSQUARE .)


state 157

    (13) statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS . expression SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 169

state 158

    (15) statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .

    IF              reduce using rule 15 (statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    FOR             reduce using rule 15 (statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    WHILE           reduce using rule 15 (statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    PRINT           reduce using rule 15 (statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 15 (statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    ADDRESS         reduce using rule 15 (statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    VAR             reduce using rule 15 (statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    CONST           reduce using rule 15 (statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    DEF             reduce using rule 15 (statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    DELETE          reduce using rule 15 (statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    MINUS           reduce using rule 15 (statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    LPAREN          reduce using rule 15 (statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    LSQUARE         reduce using rule 15 (statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    TYPEOF          reduce using rule 15 (statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    LENGTH          reduce using rule 15 (statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    NUMBER          reduce using rule 15 (statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    STRING          reduce using rule 15 (statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    $end            reduce using rule 15 (statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    END             reduce using rule 15 (statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    ELSE            reduce using rule 15 (statement -> VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)


state 159

    (17) statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .

    IF              reduce using rule 17 (statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    FOR             reduce using rule 17 (statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    WHILE           reduce using rule 17 (statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    PRINT           reduce using rule 17 (statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 17 (statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    ADDRESS         reduce using rule 17 (statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    VAR             reduce using rule 17 (statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    CONST           reduce using rule 17 (statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    DEF             reduce using rule 17 (statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    DELETE          reduce using rule 17 (statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    MINUS           reduce using rule 17 (statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    LPAREN          reduce using rule 17 (statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    LSQUARE         reduce using rule 17 (statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    TYPEOF          reduce using rule 17 (statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    LENGTH          reduce using rule 17 (statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    NUMBER          reduce using rule 17 (statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    STRING          reduce using rule 17 (statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    $end            reduce using rule 17 (statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    END             reduce using rule 17 (statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)
    ELSE            reduce using rule 17 (statement -> CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON .)


state 160

    (18) statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE . SEMICOLON
    (59) expression -> LSQUARE cargument RSQUARE .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 170
    PLUS            reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    MINUS           reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    TIMES           reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    DIVIDE          reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    EXPONENT        reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    REMAINDER       reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    INFERIOR        reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    INFERIOR_OR_EQUAL reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    SUPERIOR        reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    SUPERIOR_OR_EQUAL reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    DOUBLE_EQUALS   reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)
    DIFFERENT       reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .)

  ! SEMICOLON       [ reduce using rule 59 (expression -> LSQUARE cargument RSQUARE .) ]


state 161

    (19) statement -> DEF VARIABLE LPAREN dargument RPAREN DO . block END
    (2) block -> . block statement
    (3) block -> . statement
    (4) statement -> . IF LPAREN comparison RPAREN THEN block END
    (5) statement -> . IF LPAREN comparison RPAREN THEN block ELSE block END
    (6) statement -> . FOR LPAREN expression TO expression RPAREN NEXT block END
    (7) statement -> . WHILE LPAREN comparison RPAREN NEXT block END
    (8) statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (9) statement -> . VARIABLE EQUALS expression SEMICOLON
    (10) statement -> . VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (11) statement -> . ADDRESS VARIABLE EQUALS expression SEMICOLON
    (12) statement -> . VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (13) statement -> . ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (14) statement -> . VAR VARIABLE EQUALS expression SEMICOLON
    (15) statement -> . VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (16) statement -> . CONST VARIABLE EQUALS expression SEMICOLON
    (17) statement -> . CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (18) statement -> . CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON
    (19) statement -> . DEF VARIABLE LPAREN dargument RPAREN DO block END
    (20) statement -> . DEF VARIABLE LPAREN RPAREN DO block END
    (21) statement -> . VARIABLE LPAREN cargument RPAREN SEMICOLON
    (22) statement -> . VARIABLE LPAREN RPAREN SEMICOLON
    (27) statement -> . DELETE VARIABLE SEMICOLON
    (28) statement -> . expression SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    IF              shift and go to state 4
    FOR             shift and go to state 6
    WHILE           shift and go to state 8
    PRINT           shift and go to state 9
    VARIABLE        shift and go to state 10
    ADDRESS         shift and go to state 11
    VAR             shift and go to state 13
    CONST           shift and go to state 14
    DEF             shift and go to state 15
    DELETE          shift and go to state 16
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    block                          shift and go to state 171
    statement                      shift and go to state 3
    expression                     shift and go to state 7

state 162

    (23) dargument -> dargument SEPARATOR VARIABLE .

    RPAREN          reduce using rule 23 (dargument -> dargument SEPARATOR VARIABLE .)
    SEPARATOR       reduce using rule 23 (dargument -> dargument SEPARATOR VARIABLE .)


state 163

    (20) statement -> DEF VARIABLE LPAREN RPAREN DO block . END
    (2) block -> block . statement
    (4) statement -> . IF LPAREN comparison RPAREN THEN block END
    (5) statement -> . IF LPAREN comparison RPAREN THEN block ELSE block END
    (6) statement -> . FOR LPAREN expression TO expression RPAREN NEXT block END
    (7) statement -> . WHILE LPAREN comparison RPAREN NEXT block END
    (8) statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (9) statement -> . VARIABLE EQUALS expression SEMICOLON
    (10) statement -> . VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (11) statement -> . ADDRESS VARIABLE EQUALS expression SEMICOLON
    (12) statement -> . VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (13) statement -> . ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (14) statement -> . VAR VARIABLE EQUALS expression SEMICOLON
    (15) statement -> . VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (16) statement -> . CONST VARIABLE EQUALS expression SEMICOLON
    (17) statement -> . CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (18) statement -> . CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON
    (19) statement -> . DEF VARIABLE LPAREN dargument RPAREN DO block END
    (20) statement -> . DEF VARIABLE LPAREN RPAREN DO block END
    (21) statement -> . VARIABLE LPAREN cargument RPAREN SEMICOLON
    (22) statement -> . VARIABLE LPAREN RPAREN SEMICOLON
    (27) statement -> . DELETE VARIABLE SEMICOLON
    (28) statement -> . expression SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    END             shift and go to state 172
    IF              shift and go to state 4
    FOR             shift and go to state 6
    WHILE           shift and go to state 8
    PRINT           shift and go to state 9
    VARIABLE        shift and go to state 10
    ADDRESS         shift and go to state 11
    VAR             shift and go to state 13
    CONST           shift and go to state 14
    DEF             shift and go to state 15
    DELETE          shift and go to state 16
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    statement                      shift and go to state 22
    expression                     shift and go to state 7

state 164

    (4) statement -> IF LPAREN comparison RPAREN THEN block END .

    IF              reduce using rule 4 (statement -> IF LPAREN comparison RPAREN THEN block END .)
    FOR             reduce using rule 4 (statement -> IF LPAREN comparison RPAREN THEN block END .)
    WHILE           reduce using rule 4 (statement -> IF LPAREN comparison RPAREN THEN block END .)
    PRINT           reduce using rule 4 (statement -> IF LPAREN comparison RPAREN THEN block END .)
    VARIABLE        reduce using rule 4 (statement -> IF LPAREN comparison RPAREN THEN block END .)
    ADDRESS         reduce using rule 4 (statement -> IF LPAREN comparison RPAREN THEN block END .)
    VAR             reduce using rule 4 (statement -> IF LPAREN comparison RPAREN THEN block END .)
    CONST           reduce using rule 4 (statement -> IF LPAREN comparison RPAREN THEN block END .)
    DEF             reduce using rule 4 (statement -> IF LPAREN comparison RPAREN THEN block END .)
    DELETE          reduce using rule 4 (statement -> IF LPAREN comparison RPAREN THEN block END .)
    MINUS           reduce using rule 4 (statement -> IF LPAREN comparison RPAREN THEN block END .)
    LPAREN          reduce using rule 4 (statement -> IF LPAREN comparison RPAREN THEN block END .)
    LSQUARE         reduce using rule 4 (statement -> IF LPAREN comparison RPAREN THEN block END .)
    TYPEOF          reduce using rule 4 (statement -> IF LPAREN comparison RPAREN THEN block END .)
    LENGTH          reduce using rule 4 (statement -> IF LPAREN comparison RPAREN THEN block END .)
    NUMBER          reduce using rule 4 (statement -> IF LPAREN comparison RPAREN THEN block END .)
    STRING          reduce using rule 4 (statement -> IF LPAREN comparison RPAREN THEN block END .)
    $end            reduce using rule 4 (statement -> IF LPAREN comparison RPAREN THEN block END .)
    END             reduce using rule 4 (statement -> IF LPAREN comparison RPAREN THEN block END .)
    ELSE            reduce using rule 4 (statement -> IF LPAREN comparison RPAREN THEN block END .)


state 165

    (5) statement -> IF LPAREN comparison RPAREN THEN block ELSE . block END
    (2) block -> . block statement
    (3) block -> . statement
    (4) statement -> . IF LPAREN comparison RPAREN THEN block END
    (5) statement -> . IF LPAREN comparison RPAREN THEN block ELSE block END
    (6) statement -> . FOR LPAREN expression TO expression RPAREN NEXT block END
    (7) statement -> . WHILE LPAREN comparison RPAREN NEXT block END
    (8) statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (9) statement -> . VARIABLE EQUALS expression SEMICOLON
    (10) statement -> . VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (11) statement -> . ADDRESS VARIABLE EQUALS expression SEMICOLON
    (12) statement -> . VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (13) statement -> . ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (14) statement -> . VAR VARIABLE EQUALS expression SEMICOLON
    (15) statement -> . VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (16) statement -> . CONST VARIABLE EQUALS expression SEMICOLON
    (17) statement -> . CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (18) statement -> . CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON
    (19) statement -> . DEF VARIABLE LPAREN dargument RPAREN DO block END
    (20) statement -> . DEF VARIABLE LPAREN RPAREN DO block END
    (21) statement -> . VARIABLE LPAREN cargument RPAREN SEMICOLON
    (22) statement -> . VARIABLE LPAREN RPAREN SEMICOLON
    (27) statement -> . DELETE VARIABLE SEMICOLON
    (28) statement -> . expression SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    IF              shift and go to state 4
    FOR             shift and go to state 6
    WHILE           shift and go to state 8
    PRINT           shift and go to state 9
    VARIABLE        shift and go to state 10
    ADDRESS         shift and go to state 11
    VAR             shift and go to state 13
    CONST           shift and go to state 14
    DEF             shift and go to state 15
    DELETE          shift and go to state 16
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    block                          shift and go to state 173
    statement                      shift and go to state 3
    expression                     shift and go to state 7

state 166

    (6) statement -> FOR LPAREN expression TO expression RPAREN NEXT . block END
    (2) block -> . block statement
    (3) block -> . statement
    (4) statement -> . IF LPAREN comparison RPAREN THEN block END
    (5) statement -> . IF LPAREN comparison RPAREN THEN block ELSE block END
    (6) statement -> . FOR LPAREN expression TO expression RPAREN NEXT block END
    (7) statement -> . WHILE LPAREN comparison RPAREN NEXT block END
    (8) statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (9) statement -> . VARIABLE EQUALS expression SEMICOLON
    (10) statement -> . VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (11) statement -> . ADDRESS VARIABLE EQUALS expression SEMICOLON
    (12) statement -> . VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (13) statement -> . ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (14) statement -> . VAR VARIABLE EQUALS expression SEMICOLON
    (15) statement -> . VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (16) statement -> . CONST VARIABLE EQUALS expression SEMICOLON
    (17) statement -> . CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (18) statement -> . CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON
    (19) statement -> . DEF VARIABLE LPAREN dargument RPAREN DO block END
    (20) statement -> . DEF VARIABLE LPAREN RPAREN DO block END
    (21) statement -> . VARIABLE LPAREN cargument RPAREN SEMICOLON
    (22) statement -> . VARIABLE LPAREN RPAREN SEMICOLON
    (27) statement -> . DELETE VARIABLE SEMICOLON
    (28) statement -> . expression SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    IF              shift and go to state 4
    FOR             shift and go to state 6
    WHILE           shift and go to state 8
    PRINT           shift and go to state 9
    VARIABLE        shift and go to state 10
    ADDRESS         shift and go to state 11
    VAR             shift and go to state 13
    CONST           shift and go to state 14
    DEF             shift and go to state 15
    DELETE          shift and go to state 16
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 7
    block                          shift and go to state 174
    statement                      shift and go to state 3

state 167

    (7) statement -> WHILE LPAREN comparison RPAREN NEXT block END .

    IF              reduce using rule 7 (statement -> WHILE LPAREN comparison RPAREN NEXT block END .)
    FOR             reduce using rule 7 (statement -> WHILE LPAREN comparison RPAREN NEXT block END .)
    WHILE           reduce using rule 7 (statement -> WHILE LPAREN comparison RPAREN NEXT block END .)
    PRINT           reduce using rule 7 (statement -> WHILE LPAREN comparison RPAREN NEXT block END .)
    VARIABLE        reduce using rule 7 (statement -> WHILE LPAREN comparison RPAREN NEXT block END .)
    ADDRESS         reduce using rule 7 (statement -> WHILE LPAREN comparison RPAREN NEXT block END .)
    VAR             reduce using rule 7 (statement -> WHILE LPAREN comparison RPAREN NEXT block END .)
    CONST           reduce using rule 7 (statement -> WHILE LPAREN comparison RPAREN NEXT block END .)
    DEF             reduce using rule 7 (statement -> WHILE LPAREN comparison RPAREN NEXT block END .)
    DELETE          reduce using rule 7 (statement -> WHILE LPAREN comparison RPAREN NEXT block END .)
    MINUS           reduce using rule 7 (statement -> WHILE LPAREN comparison RPAREN NEXT block END .)
    LPAREN          reduce using rule 7 (statement -> WHILE LPAREN comparison RPAREN NEXT block END .)
    LSQUARE         reduce using rule 7 (statement -> WHILE LPAREN comparison RPAREN NEXT block END .)
    TYPEOF          reduce using rule 7 (statement -> WHILE LPAREN comparison RPAREN NEXT block END .)
    LENGTH          reduce using rule 7 (statement -> WHILE LPAREN comparison RPAREN NEXT block END .)
    NUMBER          reduce using rule 7 (statement -> WHILE LPAREN comparison RPAREN NEXT block END .)
    STRING          reduce using rule 7 (statement -> WHILE LPAREN comparison RPAREN NEXT block END .)
    $end            reduce using rule 7 (statement -> WHILE LPAREN comparison RPAREN NEXT block END .)
    END             reduce using rule 7 (statement -> WHILE LPAREN comparison RPAREN NEXT block END .)
    ELSE            reduce using rule 7 (statement -> WHILE LPAREN comparison RPAREN NEXT block END .)


state 168

    (12) statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .

    IF              reduce using rule 12 (statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    FOR             reduce using rule 12 (statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 12 (statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    PRINT           reduce using rule 12 (statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    VARIABLE        reduce using rule 12 (statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    ADDRESS         reduce using rule 12 (statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    VAR             reduce using rule 12 (statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    CONST           reduce using rule 12 (statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    DEF             reduce using rule 12 (statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    DELETE          reduce using rule 12 (statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    MINUS           reduce using rule 12 (statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    LPAREN          reduce using rule 12 (statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    LSQUARE         reduce using rule 12 (statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    TYPEOF          reduce using rule 12 (statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    LENGTH          reduce using rule 12 (statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    NUMBER          reduce using rule 12 (statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    STRING          reduce using rule 12 (statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    $end            reduce using rule 12 (statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    END             reduce using rule 12 (statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    ELSE            reduce using rule 12 (statement -> VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)


state 169

    (13) statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression . SEMICOLON
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . EXPONENT expression
    (40) expression -> expression . REMAINDER expression
    (41) expression -> expression . INFERIOR expression
    (42) expression -> expression . INFERIOR_OR_EQUAL expression
    (43) expression -> expression . SUPERIOR expression
    (44) expression -> expression . SUPERIOR_OR_EQUAL expression
    (45) expression -> expression . DOUBLE_EQUALS expression
    (46) expression -> expression . DIFFERENT expression

    SEMICOLON       shift and go to state 175
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    EXPONENT        shift and go to state 32
    REMAINDER       shift and go to state 33
    INFERIOR        shift and go to state 34
    INFERIOR_OR_EQUAL shift and go to state 35
    SUPERIOR        shift and go to state 36
    SUPERIOR_OR_EQUAL shift and go to state 37
    DOUBLE_EQUALS   shift and go to state 38
    DIFFERENT       shift and go to state 39


state 170

    (18) statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON .

    IF              reduce using rule 18 (statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON .)
    FOR             reduce using rule 18 (statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON .)
    WHILE           reduce using rule 18 (statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON .)
    PRINT           reduce using rule 18 (statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON .)
    VARIABLE        reduce using rule 18 (statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON .)
    ADDRESS         reduce using rule 18 (statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON .)
    VAR             reduce using rule 18 (statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON .)
    CONST           reduce using rule 18 (statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON .)
    DEF             reduce using rule 18 (statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON .)
    DELETE          reduce using rule 18 (statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON .)
    MINUS           reduce using rule 18 (statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON .)
    LPAREN          reduce using rule 18 (statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON .)
    LSQUARE         reduce using rule 18 (statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON .)
    TYPEOF          reduce using rule 18 (statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON .)
    LENGTH          reduce using rule 18 (statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON .)
    NUMBER          reduce using rule 18 (statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON .)
    STRING          reduce using rule 18 (statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON .)
    $end            reduce using rule 18 (statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON .)
    END             reduce using rule 18 (statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON .)
    ELSE            reduce using rule 18 (statement -> CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON .)


state 171

    (19) statement -> DEF VARIABLE LPAREN dargument RPAREN DO block . END
    (2) block -> block . statement
    (4) statement -> . IF LPAREN comparison RPAREN THEN block END
    (5) statement -> . IF LPAREN comparison RPAREN THEN block ELSE block END
    (6) statement -> . FOR LPAREN expression TO expression RPAREN NEXT block END
    (7) statement -> . WHILE LPAREN comparison RPAREN NEXT block END
    (8) statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (9) statement -> . VARIABLE EQUALS expression SEMICOLON
    (10) statement -> . VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (11) statement -> . ADDRESS VARIABLE EQUALS expression SEMICOLON
    (12) statement -> . VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (13) statement -> . ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (14) statement -> . VAR VARIABLE EQUALS expression SEMICOLON
    (15) statement -> . VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (16) statement -> . CONST VARIABLE EQUALS expression SEMICOLON
    (17) statement -> . CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (18) statement -> . CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON
    (19) statement -> . DEF VARIABLE LPAREN dargument RPAREN DO block END
    (20) statement -> . DEF VARIABLE LPAREN RPAREN DO block END
    (21) statement -> . VARIABLE LPAREN cargument RPAREN SEMICOLON
    (22) statement -> . VARIABLE LPAREN RPAREN SEMICOLON
    (27) statement -> . DELETE VARIABLE SEMICOLON
    (28) statement -> . expression SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    END             shift and go to state 176
    IF              shift and go to state 4
    FOR             shift and go to state 6
    WHILE           shift and go to state 8
    PRINT           shift and go to state 9
    VARIABLE        shift and go to state 10
    ADDRESS         shift and go to state 11
    VAR             shift and go to state 13
    CONST           shift and go to state 14
    DEF             shift and go to state 15
    DELETE          shift and go to state 16
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    statement                      shift and go to state 22
    expression                     shift and go to state 7

state 172

    (20) statement -> DEF VARIABLE LPAREN RPAREN DO block END .

    IF              reduce using rule 20 (statement -> DEF VARIABLE LPAREN RPAREN DO block END .)
    FOR             reduce using rule 20 (statement -> DEF VARIABLE LPAREN RPAREN DO block END .)
    WHILE           reduce using rule 20 (statement -> DEF VARIABLE LPAREN RPAREN DO block END .)
    PRINT           reduce using rule 20 (statement -> DEF VARIABLE LPAREN RPAREN DO block END .)
    VARIABLE        reduce using rule 20 (statement -> DEF VARIABLE LPAREN RPAREN DO block END .)
    ADDRESS         reduce using rule 20 (statement -> DEF VARIABLE LPAREN RPAREN DO block END .)
    VAR             reduce using rule 20 (statement -> DEF VARIABLE LPAREN RPAREN DO block END .)
    CONST           reduce using rule 20 (statement -> DEF VARIABLE LPAREN RPAREN DO block END .)
    DEF             reduce using rule 20 (statement -> DEF VARIABLE LPAREN RPAREN DO block END .)
    DELETE          reduce using rule 20 (statement -> DEF VARIABLE LPAREN RPAREN DO block END .)
    MINUS           reduce using rule 20 (statement -> DEF VARIABLE LPAREN RPAREN DO block END .)
    LPAREN          reduce using rule 20 (statement -> DEF VARIABLE LPAREN RPAREN DO block END .)
    LSQUARE         reduce using rule 20 (statement -> DEF VARIABLE LPAREN RPAREN DO block END .)
    TYPEOF          reduce using rule 20 (statement -> DEF VARIABLE LPAREN RPAREN DO block END .)
    LENGTH          reduce using rule 20 (statement -> DEF VARIABLE LPAREN RPAREN DO block END .)
    NUMBER          reduce using rule 20 (statement -> DEF VARIABLE LPAREN RPAREN DO block END .)
    STRING          reduce using rule 20 (statement -> DEF VARIABLE LPAREN RPAREN DO block END .)
    $end            reduce using rule 20 (statement -> DEF VARIABLE LPAREN RPAREN DO block END .)
    END             reduce using rule 20 (statement -> DEF VARIABLE LPAREN RPAREN DO block END .)
    ELSE            reduce using rule 20 (statement -> DEF VARIABLE LPAREN RPAREN DO block END .)


state 173

    (5) statement -> IF LPAREN comparison RPAREN THEN block ELSE block . END
    (2) block -> block . statement
    (4) statement -> . IF LPAREN comparison RPAREN THEN block END
    (5) statement -> . IF LPAREN comparison RPAREN THEN block ELSE block END
    (6) statement -> . FOR LPAREN expression TO expression RPAREN NEXT block END
    (7) statement -> . WHILE LPAREN comparison RPAREN NEXT block END
    (8) statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (9) statement -> . VARIABLE EQUALS expression SEMICOLON
    (10) statement -> . VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (11) statement -> . ADDRESS VARIABLE EQUALS expression SEMICOLON
    (12) statement -> . VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (13) statement -> . ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (14) statement -> . VAR VARIABLE EQUALS expression SEMICOLON
    (15) statement -> . VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (16) statement -> . CONST VARIABLE EQUALS expression SEMICOLON
    (17) statement -> . CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (18) statement -> . CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON
    (19) statement -> . DEF VARIABLE LPAREN dargument RPAREN DO block END
    (20) statement -> . DEF VARIABLE LPAREN RPAREN DO block END
    (21) statement -> . VARIABLE LPAREN cargument RPAREN SEMICOLON
    (22) statement -> . VARIABLE LPAREN RPAREN SEMICOLON
    (27) statement -> . DELETE VARIABLE SEMICOLON
    (28) statement -> . expression SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    END             shift and go to state 177
    IF              shift and go to state 4
    FOR             shift and go to state 6
    WHILE           shift and go to state 8
    PRINT           shift and go to state 9
    VARIABLE        shift and go to state 10
    ADDRESS         shift and go to state 11
    VAR             shift and go to state 13
    CONST           shift and go to state 14
    DEF             shift and go to state 15
    DELETE          shift and go to state 16
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    statement                      shift and go to state 22
    expression                     shift and go to state 7

state 174

    (6) statement -> FOR LPAREN expression TO expression RPAREN NEXT block . END
    (2) block -> block . statement
    (4) statement -> . IF LPAREN comparison RPAREN THEN block END
    (5) statement -> . IF LPAREN comparison RPAREN THEN block ELSE block END
    (6) statement -> . FOR LPAREN expression TO expression RPAREN NEXT block END
    (7) statement -> . WHILE LPAREN comparison RPAREN NEXT block END
    (8) statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (9) statement -> . VARIABLE EQUALS expression SEMICOLON
    (10) statement -> . VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (11) statement -> . ADDRESS VARIABLE EQUALS expression SEMICOLON
    (12) statement -> . VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (13) statement -> . ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON
    (14) statement -> . VAR VARIABLE EQUALS expression SEMICOLON
    (15) statement -> . VAR VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (16) statement -> . CONST VARIABLE EQUALS expression SEMICOLON
    (17) statement -> . CONST VARIABLE EQUALS ADDRESS VARIABLE SEMICOLON
    (18) statement -> . CONST VARIABLE EQUALS LSQUARE cargument RSQUARE SEMICOLON
    (19) statement -> . DEF VARIABLE LPAREN dargument RPAREN DO block END
    (20) statement -> . DEF VARIABLE LPAREN RPAREN DO block END
    (21) statement -> . VARIABLE LPAREN cargument RPAREN SEMICOLON
    (22) statement -> . VARIABLE LPAREN RPAREN SEMICOLON
    (27) statement -> . DELETE VARIABLE SEMICOLON
    (28) statement -> . expression SEMICOLON
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression EXPONENT expression
    (40) expression -> . expression REMAINDER expression
    (41) expression -> . expression INFERIOR expression
    (42) expression -> . expression INFERIOR_OR_EQUAL expression
    (43) expression -> . expression SUPERIOR expression
    (44) expression -> . expression SUPERIOR_OR_EQUAL expression
    (45) expression -> . expression DOUBLE_EQUALS expression
    (46) expression -> . expression DIFFERENT expression
    (47) expression -> . MINUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . LSQUARE UNPACK VARIABLE RSQUARE
    (50) expression -> . TYPEOF LPAREN VARIABLE RPAREN
    (51) expression -> . LENGTH LPAREN expression RPAREN
    (52) expression -> . VARIABLE LSQUARE expression RSQUARE
    (53) expression -> . VARIABLE LSQUARE expression COLON expression RSQUARE
    (54) expression -> . VARIABLE LSQUARE COLON expression RSQUARE
    (55) expression -> . VARIABLE LSQUARE expression COLON RSQUARE
    (56) expression -> . VARIABLE LSQUARE COLON RSQUARE
    (57) expression -> . NUMBER
    (58) expression -> . STRING
    (59) expression -> . LSQUARE cargument RSQUARE
    (60) expression -> . VARIABLE

    END             shift and go to state 178
    IF              shift and go to state 4
    FOR             shift and go to state 6
    WHILE           shift and go to state 8
    PRINT           shift and go to state 9
    VARIABLE        shift and go to state 10
    ADDRESS         shift and go to state 11
    VAR             shift and go to state 13
    CONST           shift and go to state 14
    DEF             shift and go to state 15
    DELETE          shift and go to state 16
    MINUS           shift and go to state 17
    LPAREN          shift and go to state 5
    LSQUARE         shift and go to state 12
    TYPEOF          shift and go to state 18
    LENGTH          shift and go to state 19
    NUMBER          shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 7
    statement                      shift and go to state 22

state 175

    (13) statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .

    IF              reduce using rule 13 (statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    FOR             reduce using rule 13 (statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 13 (statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    PRINT           reduce using rule 13 (statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    VARIABLE        reduce using rule 13 (statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    ADDRESS         reduce using rule 13 (statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    VAR             reduce using rule 13 (statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    CONST           reduce using rule 13 (statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    DEF             reduce using rule 13 (statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    DELETE          reduce using rule 13 (statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    MINUS           reduce using rule 13 (statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    LPAREN          reduce using rule 13 (statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    LSQUARE         reduce using rule 13 (statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    TYPEOF          reduce using rule 13 (statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    LENGTH          reduce using rule 13 (statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    NUMBER          reduce using rule 13 (statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    STRING          reduce using rule 13 (statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    $end            reduce using rule 13 (statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    END             reduce using rule 13 (statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)
    ELSE            reduce using rule 13 (statement -> ADDRESS VARIABLE LSQUARE expression RSQUARE EQUALS expression SEMICOLON .)


state 176

    (19) statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END .

    IF              reduce using rule 19 (statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END .)
    FOR             reduce using rule 19 (statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END .)
    WHILE           reduce using rule 19 (statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END .)
    PRINT           reduce using rule 19 (statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END .)
    VARIABLE        reduce using rule 19 (statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END .)
    ADDRESS         reduce using rule 19 (statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END .)
    VAR             reduce using rule 19 (statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END .)
    CONST           reduce using rule 19 (statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END .)
    DEF             reduce using rule 19 (statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END .)
    DELETE          reduce using rule 19 (statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END .)
    MINUS           reduce using rule 19 (statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END .)
    LPAREN          reduce using rule 19 (statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END .)
    LSQUARE         reduce using rule 19 (statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END .)
    TYPEOF          reduce using rule 19 (statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END .)
    LENGTH          reduce using rule 19 (statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END .)
    NUMBER          reduce using rule 19 (statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END .)
    STRING          reduce using rule 19 (statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END .)
    $end            reduce using rule 19 (statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END .)
    END             reduce using rule 19 (statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END .)
    ELSE            reduce using rule 19 (statement -> DEF VARIABLE LPAREN dargument RPAREN DO block END .)


state 177

    (5) statement -> IF LPAREN comparison RPAREN THEN block ELSE block END .

    IF              reduce using rule 5 (statement -> IF LPAREN comparison RPAREN THEN block ELSE block END .)
    FOR             reduce using rule 5 (statement -> IF LPAREN comparison RPAREN THEN block ELSE block END .)
    WHILE           reduce using rule 5 (statement -> IF LPAREN comparison RPAREN THEN block ELSE block END .)
    PRINT           reduce using rule 5 (statement -> IF LPAREN comparison RPAREN THEN block ELSE block END .)
    VARIABLE        reduce using rule 5 (statement -> IF LPAREN comparison RPAREN THEN block ELSE block END .)
    ADDRESS         reduce using rule 5 (statement -> IF LPAREN comparison RPAREN THEN block ELSE block END .)
    VAR             reduce using rule 5 (statement -> IF LPAREN comparison RPAREN THEN block ELSE block END .)
    CONST           reduce using rule 5 (statement -> IF LPAREN comparison RPAREN THEN block ELSE block END .)
    DEF             reduce using rule 5 (statement -> IF LPAREN comparison RPAREN THEN block ELSE block END .)
    DELETE          reduce using rule 5 (statement -> IF LPAREN comparison RPAREN THEN block ELSE block END .)
    MINUS           reduce using rule 5 (statement -> IF LPAREN comparison RPAREN THEN block ELSE block END .)
    LPAREN          reduce using rule 5 (statement -> IF LPAREN comparison RPAREN THEN block ELSE block END .)
    LSQUARE         reduce using rule 5 (statement -> IF LPAREN comparison RPAREN THEN block ELSE block END .)
    TYPEOF          reduce using rule 5 (statement -> IF LPAREN comparison RPAREN THEN block ELSE block END .)
    LENGTH          reduce using rule 5 (statement -> IF LPAREN comparison RPAREN THEN block ELSE block END .)
    NUMBER          reduce using rule 5 (statement -> IF LPAREN comparison RPAREN THEN block ELSE block END .)
    STRING          reduce using rule 5 (statement -> IF LPAREN comparison RPAREN THEN block ELSE block END .)
    $end            reduce using rule 5 (statement -> IF LPAREN comparison RPAREN THEN block ELSE block END .)
    END             reduce using rule 5 (statement -> IF LPAREN comparison RPAREN THEN block ELSE block END .)
    ELSE            reduce using rule 5 (statement -> IF LPAREN comparison RPAREN THEN block ELSE block END .)


state 178

    (6) statement -> FOR LPAREN expression TO expression RPAREN NEXT block END .

    IF              reduce using rule 6 (statement -> FOR LPAREN expression TO expression RPAREN NEXT block END .)
    FOR             reduce using rule 6 (statement -> FOR LPAREN expression TO expression RPAREN NEXT block END .)
    WHILE           reduce using rule 6 (statement -> FOR LPAREN expression TO expression RPAREN NEXT block END .)
    PRINT           reduce using rule 6 (statement -> FOR LPAREN expression TO expression RPAREN NEXT block END .)
    VARIABLE        reduce using rule 6 (statement -> FOR LPAREN expression TO expression RPAREN NEXT block END .)
    ADDRESS         reduce using rule 6 (statement -> FOR LPAREN expression TO expression RPAREN NEXT block END .)
    VAR             reduce using rule 6 (statement -> FOR LPAREN expression TO expression RPAREN NEXT block END .)
    CONST           reduce using rule 6 (statement -> FOR LPAREN expression TO expression RPAREN NEXT block END .)
    DEF             reduce using rule 6 (statement -> FOR LPAREN expression TO expression RPAREN NEXT block END .)
    DELETE          reduce using rule 6 (statement -> FOR LPAREN expression TO expression RPAREN NEXT block END .)
    MINUS           reduce using rule 6 (statement -> FOR LPAREN expression TO expression RPAREN NEXT block END .)
    LPAREN          reduce using rule 6 (statement -> FOR LPAREN expression TO expression RPAREN NEXT block END .)
    LSQUARE         reduce using rule 6 (statement -> FOR LPAREN expression TO expression RPAREN NEXT block END .)
    TYPEOF          reduce using rule 6 (statement -> FOR LPAREN expression TO expression RPAREN NEXT block END .)
    LENGTH          reduce using rule 6 (statement -> FOR LPAREN expression TO expression RPAREN NEXT block END .)
    NUMBER          reduce using rule 6 (statement -> FOR LPAREN expression TO expression RPAREN NEXT block END .)
    STRING          reduce using rule 6 (statement -> FOR LPAREN expression TO expression RPAREN NEXT block END .)
    $end            reduce using rule 6 (statement -> FOR LPAREN expression TO expression RPAREN NEXT block END .)
    END             reduce using rule 6 (statement -> FOR LPAREN expression TO expression RPAREN NEXT block END .)
    ELSE            reduce using rule 6 (statement -> FOR LPAREN expression TO expression RPAREN NEXT block END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 67 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 67 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 67 resolved as shift
WARNING: shift/reduce conflict for REMAINDER in state 67 resolved as shift
WARNING: shift/reduce conflict for INFERIOR in state 67 resolved as shift
WARNING: shift/reduce conflict for INFERIOR_OR_EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR in state 67 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR_OR_EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 67 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 68 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 68 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 68 resolved as shift
WARNING: shift/reduce conflict for REMAINDER in state 68 resolved as shift
WARNING: shift/reduce conflict for INFERIOR in state 68 resolved as shift
WARNING: shift/reduce conflict for INFERIOR_OR_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR in state 68 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR_OR_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 68 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 68 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 69 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 69 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 69 resolved as shift
WARNING: shift/reduce conflict for REMAINDER in state 69 resolved as shift
WARNING: shift/reduce conflict for INFERIOR in state 69 resolved as shift
WARNING: shift/reduce conflict for INFERIOR_OR_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR in state 69 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR_OR_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 69 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 70 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 70 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 70 resolved as shift
WARNING: shift/reduce conflict for REMAINDER in state 70 resolved as shift
WARNING: shift/reduce conflict for INFERIOR in state 70 resolved as shift
WARNING: shift/reduce conflict for INFERIOR_OR_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR in state 70 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR_OR_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 70 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 70 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 71 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 71 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 71 resolved as shift
WARNING: shift/reduce conflict for REMAINDER in state 71 resolved as shift
WARNING: shift/reduce conflict for INFERIOR in state 71 resolved as shift
WARNING: shift/reduce conflict for INFERIOR_OR_EQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR in state 71 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR_OR_EQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 71 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 71 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 72 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 72 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 72 resolved as shift
WARNING: shift/reduce conflict for REMAINDER in state 72 resolved as shift
WARNING: shift/reduce conflict for INFERIOR in state 72 resolved as shift
WARNING: shift/reduce conflict for INFERIOR_OR_EQUAL in state 72 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR in state 72 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR_OR_EQUAL in state 72 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 72 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 126 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 126 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 126 resolved as shift
WARNING: shift/reduce conflict for REMAINDER in state 126 resolved as shift
WARNING: shift/reduce conflict for INFERIOR in state 126 resolved as shift
WARNING: shift/reduce conflict for INFERIOR_OR_EQUAL in state 126 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR in state 126 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR_OR_EQUAL in state 126 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 126 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 127 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 127 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 127 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 127 resolved as shift
WARNING: shift/reduce conflict for REMAINDER in state 127 resolved as shift
WARNING: shift/reduce conflict for INFERIOR in state 127 resolved as shift
WARNING: shift/reduce conflict for INFERIOR_OR_EQUAL in state 127 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR in state 127 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR_OR_EQUAL in state 127 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 127 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 127 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 128 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 128 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 128 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 128 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 128 resolved as shift
WARNING: shift/reduce conflict for REMAINDER in state 128 resolved as shift
WARNING: shift/reduce conflict for INFERIOR in state 128 resolved as shift
WARNING: shift/reduce conflict for INFERIOR_OR_EQUAL in state 128 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR in state 128 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR_OR_EQUAL in state 128 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 128 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 128 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 129 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 129 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 129 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 129 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 129 resolved as shift
WARNING: shift/reduce conflict for REMAINDER in state 129 resolved as shift
WARNING: shift/reduce conflict for INFERIOR in state 129 resolved as shift
WARNING: shift/reduce conflict for INFERIOR_OR_EQUAL in state 129 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR in state 129 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR_OR_EQUAL in state 129 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 129 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 129 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 130 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 130 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 130 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 130 resolved as shift
WARNING: shift/reduce conflict for REMAINDER in state 130 resolved as shift
WARNING: shift/reduce conflict for INFERIOR in state 130 resolved as shift
WARNING: shift/reduce conflict for INFERIOR_OR_EQUAL in state 130 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR in state 130 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR_OR_EQUAL in state 130 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 130 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 131 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 131 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 131 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 131 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 131 resolved as shift
WARNING: shift/reduce conflict for REMAINDER in state 131 resolved as shift
WARNING: shift/reduce conflict for INFERIOR in state 131 resolved as shift
WARNING: shift/reduce conflict for INFERIOR_OR_EQUAL in state 131 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR in state 131 resolved as shift
WARNING: shift/reduce conflict for SUPERIOR_OR_EQUAL in state 131 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 131 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 131 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 160 resolved as shift
